 <!DOCTYPE html>
<html>
<head lang="en">
  <title>ONC Family Referral Status</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/jq-3.3.1/jszip-2.5.0/dt-1.10.20/b-1.6.1/b-html5-1.6.1/r-2.2.3/sc-2.0.1/sl-1.3.1/datatables.min.css"/>
  <link rel="stylesheet" type="text/css" href="oncstylesheet.css">
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script> 
  <script type="text/javascript" src="https://cdn.datatables.net/v/dt/jq-3.3.1/jszip-2.5.0/dt-1.10.20/b-1.6.1/b-html5-1.6.1/r-2.2.3/sc-2.0.1/sl-1.3.1/datatables.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/plug-ins/1.10.20/api/sum().js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/plug-ins/1.10.20/sorting/natural.js"></script>
  <script type="text/javascript" src="onccommon.js"></script>
  <script type="text/javascript" src="onctable.js"></script>
  <script>
//	var pyFamJson = [];
	var cyFamJson = [];
	var bShowSuccessDialog = SHOW_SUCCESS_DIALOG;	
	var NoteStatus = {NONE: -1,SENT: 1,READ: 2,RESPONDED: 3,LATE: 4};

	var getTableData = {resource:'families'};
	sessionStorage.setItem('homelinkVisibility', "HOME_LINK_VISIBILITY");
	
    $( document ).ready(function()
    {
    	//get filter selects & reset buttons
    	for(let filter of document.getElementById('pyfilterspan').getElementsByTagName('select'))
    	 filters.push(filter);
    	
    	for(let filter of document.getElementById('cyfilterspan').getElementsByTagName('select'))
       	 filters.push(filter);
    	
    	resets.push(document.getElementById('pyresetbtn'));
    	resets.push(document.getElementById('cyresetbtn'));
    	
    	//decide whether to display the welcome message
    	setBannerVisible(true);
    	
    	//remove dashboard anchor & change partner anchor class to .breadcrumb-only
    	if(sessionStorage.getItem('homelinkVisibility') === 'hidden')
    	{
    		var dashboardli = document.getElementById('dashboard-anchor');
    		dashboardli.parentNode.removeChild(dashboardli);
    		
    		document.getElementById('linktwo-anchor').classList.add('breadcrumb-only');
    		document.getElementById('linktwo-anchor').classList.remove('breadcrumb-current');
    	}
    	
    	//initialize the tables
   		let pytable = $('#pytable').DataTable( 
		{
//			dom: 'B<"search"f>rtip',
			dom: 'i<"search"f>rtpB',
			orderClasses: false,
			stripeClasses:['stripe1','stripe2'],
			buttons: 
			{
				buttons: 
				[
					{ 
 						text: 'Refer Prior Year Family',
 						name: 'btnReRefer',
				    	action: function ( e, dt, node, config )
				    	{
				    		let selectedRow = pytable.row('.selected').data();
				    		if(typeof selectedRow !== 'undefined')		    						
				    			rowAction('pytable', selectedRow);
				    	},
				    	enabled: false 
				    },
				    { 
					    text: 'Refer New Family',
					    name: 'btnReferNew',
					    action: function ( e, dt, node, config ) { newAction(); }
					},
				    { 
				    	text: 'Code',
				    	name: 'btnPYCode',
				    	action: function ( e, dt, node, config )
				    	{
				    		var selectedRow = pytable.row('.selected').data();
				    		if (typeof selectedRow !== 'undefined')		    						
				    			dnsCode(selectedRow);
				    	},
				    	enabled: false 
				    },
				    {
		                extend: 'excelHtml5',
		                exportOptions: { columns: ':visible' }
		            },
		            {
		                extend: 'pdfHtml5',
		                exportOptions: { columns: ':visible' }
		            }
				],
				dom: 
				{
				    button: 
				    {
				    	className: ''
				    }
				}
			},
			order: [[ 3, "asc" ]],
			columns: 
			[
				{ data: "id", searchable: false, visible: false},
				{ data: "oncNum", type:'natural', width: '10%', className: 'dt-head-left'  },
				{ data: "HOHFirstName", width: '25%' },
				{ data: "HOHLastName", width: '30%' },
				{ data: "dnsCodeAcronym",
				  width: '10%',
//				  render: function (data, type, row)
//				  {
//					  return (data == '') ? '' : '<button>' + data + '</button>';
//				  },
				  className: 'dt-body-center',
				},
				{ data: "bAlreadyReferred",
				  type: 'boolean', 
				  width: '25%px',
				  className: 'checkmark',
				  render: function (data, type, row)
				  {
                      return (data == true) ? '&#x2713;' : '';
				  },
				  className: 'dt-body-center' 
				},
				{ data: "fstatus", width: '80px', className: 'dt-body-center', visible: false },
				{ data: "giftStatus", width: '80px', className: 'dt-body-center', visible: false },
				{ data: "mealStatus", width: '80px', className: 'dt-body-center', visible: false },
				{ data: "agentID", visible: false },
				{ data: "groupID", visible: false }
			],
			language:
		    {
		    	zeroRecords: "No Families Found That Meet Filter Criteria - Sorry",
		        info: "Showing _TOTAL_ prior season families",
		        infoEmpty: "No Family Data Available",
		        infoFiltered: " of _MAX_ total prior season families"
		    },
		    rowCallback: function(row, data, index)
		    {
		        if(data.bAlreadyReferred == true)
		        	$(row).find('td:eq(4)').addClass("checkmark"); 
		    },
			scrollY: '20vh',
			scrollCollapse: true,
			paging: false
		});
   		
   		let cytable = $('#cytable').DataTable( 
 		{
 //			dom: 'B<"search"f>rtip',
 			dom: 'i<"search"f>rtpB',
 			orderClasses: false,
 			stripeClasses:['stripe1','stripe2'],
 			buttons: 
 			{
 				buttons: 
 				[
 					{ 
 						text: 'Edit Family',
 						name: 'btnEdit',
				    	action: function ( e, dt, node, config )
				    	{
				    		let selectedRow = cytable.row('.selected').data();
				    		if(typeof selectedRow !== 'undefined')		    						
				    			rowAction('cytable', selectedRow);
				    	},
				    	enabled: false 
				    },
/*				    
					{ 
				    	text: 'Note', 
				    	action: function ( e, dt, node, config )
				    	{
				    		var selectedRow = cytable.row('.selected').data();
				    		if (typeof selectedRow !== 'undefined')		    						
				    			rowAction(selectedRow.id);
				    	},
				    	enabled: false 
				    },
*/				    
				    { 
				    	text: 'Code',
				    	name: 'btnCYCode',
				    	action: function ( e, dt, node, config )
				    	{
				    		var selectedRow = cytable.row('.selected').data();
				    		if (typeof selectedRow !== 'undefined')		    						
				    			dnsCode(selectedRow);
				    	},
				    	enabled: false 
				    },
				    {
		                extend: 'excelHtml5',
		                exportOptions: { columns: ':visible' }
		            },
		            {
		                extend: 'pdfHtml5',
		                exportOptions: { columns: ':visible' }
		            }
				],
				dom: 
				{
				    button: 
				    {
				    	className: ''
				    }
				}
			},
			order: [[ 3, "asc" ]],
			columns: 
			[
				{ data: "id", searchable: false, visible: false},
				{ data: "oncNum", type:'natural', width: '48px', className: 'dt-head-left'  },
				{ data: "HOHFirstName", width: '140px' },
				{ data: "HOHLastName", width: '160px' },
				{ data: "dnsCodeAcronym", width: '40px', className: 'dt-body-center' },
				{ data: "fstatus",
				  width: '80px',
				  render: function (data, type, row)
				  {
					  return (data === 'Confirmed') ? data + ' &#x2713;' : data;
				  },
				  className: 'dt-body-center'
				},
				{ data: "giftStatus",
				  width: '80px',
				  render: function (data, type, row)
				  {
					  return (data === 'Delivered') ? data + ' &#x2713;' : data;
				  },
				  className: 'dt-body-center'
				},
				{ data: "mealStatus",
				  width: '80px',
				  render: function (data, type, row)
				  {
				  	if(data === 'Referred')
						return data + ' &#x2713;';
					else if(data === 'None')
						return 'Not Requested';
					else 
						return data;
				  },
				  className: 'dt-body-center'
				},
				{ data: "agentID", visible: false },
				{ data: "groupID", visible: false }
			],
			language:
		    {
		    	zeroRecords: "No Families Found That Meet Filter Criteria - Sorry",
		        info: "Showing _TOTAL_ current season families",
		        infoEmpty: "No Family Data Available",
		        infoFiltered: " of _MAX_ total current season families"
		    },
			scrollY: '20vh',
			scrollCollapse: true,
			paging: false
 		});

   	 	//get the list of current seasons parameters from the data base and use it to determine
   	 	//what an agent can do and how webforms are configured
   	 	const params = "offset=" + new Date().getTimezoneOffset() + "&callback=?";
		$.getJSON('seasonparameters', params, function(parameters)
		{
			if(parameters.hasOwnProperty('error'))
				window.location=document.getElementById('timeoutanchor').href;
			else
			{
				sessionStorage.setItem('thanksgivingMealCutoff', parameters.thanksgivingMealDeadline);
				sessionStorage.setItem('decemberMealCutoff', parameters.decemberMealDeadline);
				sessionStorage.setItem('editDeadline', parameters.editDeadline);
				sessionStorage.setItem('decemberGiftDeadline', parameters.decemberGiftDeadline);
				sessionStorage.setItem('waitlistGiftDeadline', parameters.waitlistDeadline);				
				sessionStorage.setItem('numberGiftsPerChild', parameters.nGifts);
				sessionStorage.setItem('intakeConfiguration', parameters.wishIntakeConfiguration);
				sessionStorage.setItem('giftDistribution', parameters.giftDistribution);
				sessionStorage.setItem('mealIntake', parameters.mealIntake);
				
				//remove the refer family buttons and family edit button if past referral/edit deadlines
				const nowMillis = Date.now();
				if(nowMillis >= parameters.waitlistDeadline)
				{
					let pytable = $('#pytable').DataTable();
					pytable.buttons('btnReRefer:name').remove();
					pytable.buttons('btnReferNew:name').remove();
				}
				if(nowMillis >= parameters.editDeadline)
				{
					let cytable = $('#cytable').DataTable();
					cytable.buttons('btnEdit:name').remove();
				}
			}
			
	   		const dbyearsparams = "callback=?";
	   		$.getJSON('dbStatus', dbyearsparams, function(data)
	   		{	
	//   		document.getElementById('curragtenslbl').innerHTML = data[data.length-1].id.toString() + ' Families Referred By:';
	   		
				let maxseasons = 0;	// only display 5 seasons of prior referrals
				if(data.length > 5)
					maxseasons = data.length - 6;
				
				let combo = document.getElementById("prioryear");
	   			for(var i = data.length-1; i >= maxseasons; i--)
	   				if(data[i].id != data[data.length-1].id)
	   					addComboBoxOption(combo, data[i].id, data[i].id);
	   			
	   			//set the season filter regardelss of the redundnacy in ONCTable since
	   			//to get the agent filters we need to know the year.
	   			if(sessionStorage.getItem('prioryear') === null)
	        	{
	        		combo.selectedIndex = 0;
	        		sessionStorage.setItem('prioryear', combo.value);
	        	}
	        	else
	        		combo.value = sessionStorage.getItem('prioryear');
	   			
//	   			//check to ensure the current year is stored in session storage
//	   			if(sessionStorage.getItem('curryear') === null)
//	   				sessionStorage.setItem('curryear', data[data.length-1].id);
	   			
	   			//set the current season combo. This is not changeable and is used to refer or edit families
	   			combo = document.getElementById("currseason");
	   			sessionStorage.setItem('currseason', data[data.length-1].id);
	   			addComboBoxOption(combo, data[data.length-1].id, data[data.length-1].id);
	   			
	   			//set the prior season already referred column header and current season filter legend
	   			let thelement = document.getElementById('priorseasonreferred');
	   			thelement.innerHTML = data[data.length-1].id + ' Referral Submitted?';
	   			
	   			let cyLegendElem = document.getElementById('cyFilterLegend');
	   			cyLegendElem.innerHTML = data[data.length-1].id + ' Season Filters';
	   			
				getPYandCYIntialGroupsAgentsAndFamlies();
	   		});
		});
    		
    	//if the page load was the result of a successful referral, show the dialog box
	  	if(bShowSuccessDialog)
  			window.location=document.getElementById('successanchor').href;
	  	else
	  	{
	  		const params = "callback=?";
	  		$.getJSON('getstatus', params, function(status)
	  		{
	  			if(status.userstatus === 'Update_Profile')
	  			{
	  			    showEditProfileDialog();
	  			    window.location=document.getElementById('editprofileanchor').href;
	  			}
	  		}); 	
	  	}
    		
	  	createGroupTable();	//create profile dialog group table
    });
    
    function getTableDataParams()
    {
    	return "year=" + sessionStorage.getItem('prioryear') +"&type=regular&callback=?";
    }
    
    //this function gets current year agents and families before prior year beacuse we use the
    //current year families to deterimine the button status in the prior year family table
    function getPYandCYIntialGroupsAgentsAndFamlies()
    {
   		const pyGroupCBElem = document.getElementById('pygroups');
   		const cyGroupCBElem = document.getElementById('currgroups');
    		
   	 	//get groups from server and place into the group comboboxes. agentid =-1 defaults
		//to the logged in user
		const groupparams = "agentid=-1&callback=?";
		$.getJSON('groups', groupparams, function(groups)
		{
			//clear the group comboboxes
    		pyGroupCBElem.options.length = 0;
    		cyGroupCBElem.options.length = 0;
    		
    		//if groups is empty, add a "None" option. If it has more then
    		//one group, add a "Any" option
    		if(groups.length == 0)
    		{
    			addComboBoxOption(pyGroupCBElem, "None", "");
    			addComboBoxOption(cyGroupCBElem, "None", "");
    		}
    		else if(groups.length > 1)
    		{
    			addComboBoxOption(pyGroupCBElem, "All", "");
    			addComboBoxOption(cyGroupCBElem, "All", "");
    		}	
    		
    		//add the groups for the agent
			for(let group of groups)
			{
				addComboBoxOption(pyGroupCBElem, group.name, group.id);
				addComboBoxOption(cyGroupCBElem, group.name, group.id);
			}
    			
   			//now that we have the groups, get the prior year agent combo box content
   			const pyAgentCBElem = document.getElementById('pyagents');
   			const cyAgentCBElem = document.getElementById('curragents');
   			pyAgentCBElem.options.length = 0;
   			cyAgentCBElem.options.length = 0;
   			
			//populate the current year agent combobox
	    	const agentsparams ="year=" + document.getElementById("currseason").value + "&callback=?";
			$.getJSON('agents', agentsparams, function(cyAgentData)
			{
				//add the "Anyone" option if there is more than one agent object
				if(cyAgentData.hasOwnProperty('error'))
					window.location=document.getElementById('timeoutanchor').href;
				else if(cyAgentData.length > 1)
					addComboBoxOption(cyAgentCBElem, "Anyone", "");
	    	
	    		//add the agents for the year
				for (let agent of cyAgentData)
					addComboBoxOption(cyAgentCBElem, agent.name, agent.id);
	    			
	    		//populate the prior year agent combobox
				var agentsparams ="year=" + sessionStorage.getItem('prioryear') + "&callback=?";
				$.getJSON('agents', agentsparams, function(pyAgentData)
				{
					//add the "Anyone" option if there is more than one agent object
					if(pyAgentData.hasOwnProperty('error'))
						window.location=document.getElementById('timeoutanchor').href;
					else if(pyAgentData.length > 1)
						addComboBoxOption(pyAgentCBElem, "Anyone", "");
			    	
			    	//add the agents for the prior year
					for (let agent of pyAgentData)
						addComboBoxOption(pyAgentCBElem, agent.name, agent.id);
	    		
	    			//now that we have groups and agents, initialize filters and row selection
	    			initializeFilters();
	    			setEnabledCYTableRowSelection();
	    			setEnabledPYTableRowSelection()
	    			
	    			//get current year families
	    			const cyfamilyparams = "year=" + sessionStorage.getItem('currseason') + "&callback=?";
	    			$.getJSON('families', cyfamilyparams, function(data)
	    			{
	    				if(data.hasOwnProperty('error'))
	    					window.location=document.getElementById('timeoutanchor').href;
	    				else
	    				{
	    					cyFamJson = data;
	    					var table = $('#cytable').DataTable();
	    					table.rows.add(data);
	    					
	    					let val = document.getElementById('curragents').value;
	    					table.column(8).search(val ? '^'+val+'$' : '', true, false);
	    					
	    					val = document.getElementById('currgroups').value;
	    					table.column(9).search(val ? '^'+val+'$' : '', true, false);
	    					
	    		   			table.draw();
	    				}
	    				    			    			
	    				const pyfamilyparams = "year=" + sessionStorage.getItem('prioryear') + "&callback=?";
	   					$.getJSON('families', pyfamilyparams, function(data)
	   					{
	   						if(data.hasOwnProperty('error'))
	   							window.location=document.getElementById('timeoutanchor').href;
	   						else
	   						{
								var table = $('#pytable').DataTable();
	   							table.rows.add(data);
	   							
	   							let val = document.getElementById('pyagents').value;
	   	    					table.column(9).search(val ? '^'+val+'$' : '', true, false);
	   	    					
	   	    					val = document.getElementById('pygroups').value;
	   	    					table.column(10).search(val ? '^'+val+'$' : '', true, false);
	   							
	   				   			table.draw();
	   						}
	   					});
	    			});
    			});	    			
			});
		});
    }
    
    function setEnabledPYTableRowSelection()
	{	
		$('#pytable tbody').on( 'click', 'tr', function () 
		{
			let pytable = $('#pytable').DataTable();
			
			if( $(this).hasClass('selected') )
			{
				$(this).removeClass('selected');
				
				//if re-referral button hasn't been removed, disable it
				if(Date.now() < sessionStorage.getItem('waitlistGiftDeadline'))
				{	
					pytable.buttons('btnReRefer:name').enable(false);
					pytable.buttons('btnReRefer:name').nodes().css("background-color", "gray");
					
					pytable.buttons('btnReferNew:name').enable(true);
					pytable.buttons('btnReferNew:name').nodes().css("background-color", "#484e78");
				}
				
				pytable.buttons('btnPYCode:name').enable(false);
			}
			else
			{
				pytable.$('tr.selected').removeClass('selected');
				$(this).addClass('selected');
				
				//if re-referral button hasn't been removed amd the family hasn't already
				//been referred, enable the re-refer button.
				if(Date.now() < sessionStorage.getItem('waitlistGiftDeadline'))
				{
					if(pytable.row( this ).data().bAlreadyReferred)
					{
						pytable.buttons('btnReRefer:name').enable(false);
						pytable.buttons('btnReRefer:name').nodes().css("background-color", "red");
					}
					else
					{
						pytable.buttons('btnReRefer:name').enable(true);
						pytable.buttons('btnReRefer:name').nodes().css("background-color", "#484e78");
					}
					
					pytable.buttons('btnReferNew:name').enable(false);
					pytable.buttons('btnReferNew:name').nodes().css("background-color", "gray");
				}
					
				//if selected row(family) has a DNS Code, enable the code button
				pytable.buttons('btnPYCode:name').enable(pytable.row(this).data().dnsCodeID > -1);
			}
		});
	    
		if(Date.now() < sessionStorage.getItem('waitlistGiftDeadline'))
		{	
			$('#pytable tbody').on('dblclick', 'tr', function () 
			{
				let pytable = $('#pytable').DataTable();
				if(pytable.row( this ).data().bAlreadyReferred === false)
					rowAction('pytable', pytable.row( this ).data());
			});
		}	
	}
    function setEnabledCYTableRowSelection()
	{	
		$('#cytable tbody').on( 'click', 'tr', function () 
		{
			let cytable = $('#cytable').DataTable();
			if( $(this).hasClass('selected') )
			{
				$(this).removeClass('selected');
				
				//if edit button hasn't been removed, disable it
				if(Date.now() < sessionStorage.getItem('editDeadline'))
					cytable.buttons('btnEdit:name').enable(false);
				
				cytable.buttons('btnCYCode:name').enable(false);
			}
			else
			{
				cytable.$('tr.selected').removeClass('selected');
				$(this).addClass('selected');
				
				//if edit button hasn't been removed, enable it
				if(Date.now() < sessionStorage.getItem('editDeadline'))
					cytable.buttons('btnEdit:name').enable(true);
				
				//if selected row(family) has a DNS Code, enable the code button
				cytable.buttons('btnCYCode:name').enable(cytable.row(this).data().dnsCodeID > -1);
			}
		});
	    
		if(Date.now() < sessionStorage.getItem('editDeadline'))
		{	
			$('#cytable tbody').on('dblclick', 'tr', function () 
			{
				let cytable = $('#cytable').DataTable();
				rowAction('cytable', cytable.row( this ).data());
			});
		}	
	}  
    function rowAction(tableID, famObject)
    {
    	sessionStorage.setItem('targetid', famObject.id);
    	sessionStorage.setItem('referencenum', famObject.referenceNum);
    	
    	var params = {};
	   	if(tableID === 'pytable')
			post('referral', params);
		else
			post('familyupdate', params);
    }    
    function newAction()
    {
    	sessionStorage.setItem('targetid', "NNA");
    	sessionStorage.setItem('referencenum', "NNA");
    	post('newfamily', '');
    }    
    function familyNote(table, family)
    {
		var year;
		if(table=== document.getElementById('pyTable'))
			year = sessionStorage.getItem('prioryear');
		else
			year =  sessionStorage.getItem('currseason');
		
		document.getElementById("notesfamheader").textContent = 'Notes for ' + family.HOHLastName + ' family';
		
		var noteparams = "year=" + year + "&famid=" + family.id + "&callback=?";
		$.getJSON('familynotes', noteparams, function(famNote)
		{
			var legend = 'Note from ONC: ' + formatDate(famNote.dateChanged);
			document.getElementById('noteslegend').textContent = legend;
			document.getElementById("notesfammssg").textContent = famNote.note;
			document.getElementById("notesresponse").textContent = famNote.response;
			document.getElementById("responsesubmit").value = famNote.id;
			
			if(famNote.status === NoteStatus.RESPONDED)
			{
				legend = 'On ' + formatDate(famNote.timeResponse) + ' ' + famNote.respondedBy + '. responded';
				document.getElementById('responselegend').textContent = legend;
				document.getElementById("responsesubmit").style.backgroundColor='Gray';
				document.getElementById("responsesubmit").disabled = true;
				document.getElementById("notesresponse").disabled = true;
			}
			else
			{
				document.getElementById("responsesubmit").style.backgroundColor='#336699';
				document.getElementById("responsesubmit").disabled = false;
				document.getElementById("notesresponse").disabled = false;
			}
			
			window.location=document.getElementById('notesanchor').href;
		});
    }    
    function formatDate(date)
    {
   		var minute;
   		if(date.minute < 10)
   			minute = '0' + date.minute;
   		else
   			minute = date.minute;
   		
   		var out = date.month+1 + "/" + date.dayOfMonth + "/" + date.year + " " + date.hourOfDay + ":" + minute;
   		return out;
    }   
    function submitNoteResponse(button)
    {
   		var year =  sessionStorage.getItem('currseason');
   		var response = document.getElementById('notesresponse').value;
   		if(response.length > 0)
   		{
   			var responseparams = "year=" + year + "&noteID=" + button.value + "&response=" + response + "&callback=?";
   			$.getJSON('noteresponse', responseparams, function(noteResponse)
   			{
   				if(noteResponse.status === NoteStatus.RESPONDED);
   				{
   					var legend = 'On ' + formatDate(noteResponse.timeResponse) 
   								+ ' ' + noteResponse.respondedBy + '. responded';
   					document.getElementById('responselegend').textContent = legend;
   					document.getElementById("responsesubmit").style.backgroundColor='Gray';
   					document.getElementById("responsesubmit").disabled = true;
   					setLastNoteStatusResponded(noteResponse.ownerID);
    				updateCYTable();
   				}
   			});
   		}
    }    
    function setLastNoteStatusResponded(famID)
    {
   		var i = 0;
   		while(i< cyFamJson.length && cyFamJson[i].id != famID)
   			i++;
   		
   		if(i< cyFamJson.length)
   			cyFamJson[i].lastNoteStatus = NoteStatus.RESPONDED;
    }    
    function dnsCode(family)
    {
		document.getElementById("dnsheader").textContent = 'Code for ' + family.HOHLastName + ' family';
		
		var codeparams = "code=" + family.dnsCodeID + "&callback=?";
		$.getJSON('dnscode', codeparams, function(dnsCode)
		{
			document.getElementById('dnslegend').textContent = dnsCode.acronym + ' - ' + dnsCode.name;
			document.getElementById("dnscode").textContent = dnsCode.definition;
			
			window.location=document.getElementById('dnscodeanchor').href;
		});
    }    
    function newFamily()
    {
    	sessionStorage.setItem("targetid", "NNA");
		post('newfamily', "");
    }
    </script>
    <style type="text/css">
    #tablediv 
	{ 
		width: 90%;
		margin: auto;
	}
	.search
	{
		font-weight: bold;
		padding: 10px 8px;
	}
	.textDialog 
	{
		position: fixed;
		font-family: Arial, Helvetica, sans-serif;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		background: rgba(5,5,5,0.4);
		z-index: 99999;
		opacity:0;
		-webkit-transition: opacity 400ms ease-in;
		-moz-transition: opacity 400ms ease-in;
		transition: opacity 400ms ease-in;
		pointer-events: none;
	}
	.textDialog:target 
	{
		opacity:1;
		pointer-events: auto;
	}
	.textDialog > div 
	{
		width: 700px;
		height: 400px;
		position: relative;
		margin: 10% auto;
		padding: 5px 10px 5px 10px;
		border-radius: 10px;
		background: #fff;
		background: -moz-linear-gradient(#fff, #999);
		background: -webkit-linear-gradient(#fff, #999);
		background: -o-linear-gradient(#fff, #999);
	}
	.textDialog label
	{
		float: left;
   		text-align: right;
   		margin-right: 0.5em;
   		display: block;
   		color: black;
   		font-size: 85%;
	}
	dl
	{	height:300px;
		overflow-y:scroll;
	}
	dt
	{
		font-weight: bold;
	}
	dt:before
	{
		content: '\A';
   		white-space: pre;
	}
	dd
	{
		font-style: italic;
	}
	textarea 
	{
		width: 400px;
		height: 140px;
		font-size: 16px;
	}
	.success-dlg
	{
		min-height: 200px;
	}    
    .checkmark
    { 
    	color: green;
    	font-size: 17px;
    }
</style> 
</head>
<body>
  <a href="#notesdlg" id="notesanchor" style="visibility: hidden">Notes</a>
  <a href="#dnscodedlg" id="dnscodeanchor" style="visibility: hidden">DNS Code</a>
  <a href="#editProfile" id="editprofileanchor" style="visibility: hidden">Edit Profile</a>
  <a href="#cellwarningdlg" id="cellwarninganchor" style="visibility: hidden">Cell Phone Verification</a>
  <a href="#timeoutdlg" id="timeoutanchor" style="visibility: hidden">Timeout</a>
  <a href="#successdlg" id="successanchor" style="visibility: hidden">Success</a>
  <div class='header'> 
    <img class='logo-img' src="onclogo">
    <span class='header-links'>
	  <a id='dashboard-anchor' class='breadcrumb-first' href='dashboard'>Dashboard</a>
      <a id='linktwo-anchor' class='breadcrumb-current' href='#'>Family Referral Status</a>
    </span>   
    <div class='headerbuttons'>
      <div class='dropdown'>
        <button class=dropbtn>Helpful Hints</button>
        <div class='dropdown-content'>
      	  <a href="#faqdlg">FAQ's</a>
      	  <a href="#defdlg">Codes/Status Key</a>
      	</div> 
      </div>
      <div class='dropdown'>
        <button class=dropbtn>Profile</button>
        <div class='dropdown-content'>
      	  <a href="#editProfile" onclick='showEditProfileDialog()'>Edit Profile</a>
      	  <a href="#chgpwdlg">Change Password</a>
      	</div> 
      </div>
      <button id='logoutbtn' onclick='onLogoutLink()'>Logout</button>
    </div>
  </div>
  <div id="welcome-div">
    <p id='banner-message'>BANNER_MESSAGE</p>
  </div> 
  <form>
    <fieldset>
  		<legend>Prior Season Filters</legend>
		<span id='pyfilterspan'>
		  <label for='prioryear' class='filterlabel'>Season:</label>
		  <select id="prioryear" title="Select season to display" data-type='tabledata' data-column='-1' data-table='pytable' data-reset='pyresetbtn' onchange='executeFilter(this)'></select>
		  <label for='pyagents' class='filterlabel'>Families Referred By:</label>
		  <select id="pyagents" title="Filter Families By Agent" data-type='search' data-column='9' data-table='pytable' data-reset='pyresetbtn'  onchange='executeFilter(this)'></select>
		  <label for='pygroups' class='filterlabel'>in Group:</label>
		  <select id="pygroups" title="Filter Families By Group" data-type='search' data-column='10' data-table='pytable' data-reset='pyresetbtn' onchange='executeFilter(this)'></select> 
		</span>
		<span class='floatright resetbtn'>
			<button id="pyresetbtn" data-table='pytable' onclick='onResetFilters(this)'>Reset Filters</button>
		</span>
	</fieldset>		
  </form>
  <div id='tablediv'>
    <table id="pytable" class='display compact' style="width:100%">
      <thead>
        <tr>
        <th>ONC ID</th>
       	<th>ONC #</th>
       	<th>First Name</th>
       	<th>Last Name</th>
	  	<th>Code</th>
	  	<th id='priorseasonreferred'>Already Referred ?</th>
       	<th>Family Status</th>
       	<th>Gift Status</th>
        <th>Meal Status</th>
        <th>Agent ID</th>
        <th>Group ID</th>
        </tr>
      </thead>
      <tbody id='pytbody'>
      </tbody>
	</table>
  </div>
  <form>
    <fieldset>
  		<legend id='cyFilterLegend'>Current Season Filters</legend>
		<span id='cyfilterspan'>
		  <label for='currseason' class='filterlabel'>Season:</label>
		  <select id="currseason" title="Select season to display" data-type='tabledata' data-column='-1' data-table='cytable' data-reset='cyresetbtn' onchange='executeFilter(this)' disabled></select>
		  <label for='curragents' class='filterlabel'>Families Referred By:</label>
		  <select id="curragents" title="Filter Families By Agent" data-type='search' data-column='8' data-table='cytable' data-reset='cyresetbtn' onchange='executeFilter(this)'></select>
		  <label for='currgroups' class='filterlabel'>in Group:</label>
		  <select id="currgroups" title="Filter Families By Group" data-type='search' data-column='9' data-table='cytable' data-reset='cyresetbtn' onchange='executeFilter(this)'></select> 
		</span>
		<span class='floatright resetbtn'>
			<button id="cyresetbtn" data-table='cytable' onclick='onResetFilters(this)'>Reset Filters</button>
		</span>
	</fieldset>		
  </form>
  <div id='tablediv'>
    <table id="cytable" class='display compact' style="width:100%">
      <thead>
        <tr>
        <th>ONC ID</th>
       	<th>ONC #</th>
       	<th>First Name</th>
       	<th>Last Name</th>
       	<th>Code</th>
       	<th>Family Status</th>
       	<th>Gift Status</th>
        <th>Meal Status</th>
        <th>Agent ID</th>
        <th>Group ID</th>
        </tr>
      </thead>
      <tbody id='pytbody'>
      </tbody>
	</table>
  </div>
<!-- Notes Dialog -->
  <div id="notesdlg" class="modalDialog">
	<div class='innerextended'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div class='dialogtopbar'>
		  <img class='logoimg' src="onclogo">
		  <span class=logospan id="notesfamheader"></span>
		</div>
		<div class='greenbackground'>
		<!-- This is the body of the dialog. -->
		    <fieldset class="fieldset-auto-width">
		      <legend id='noteslegend' class="legend-major">Note From ONC</legend>
		      <textarea id='notesfammssg' disabled></textarea>
		    </fieldset>
		    <fieldset class="fieldset-auto-width">
		      <legend id='responselegend' class="legend-major">Response</legend>
		      <textarea id='notesresponse'></textarea>
		      <button id="responsesubmit" class='floatright' onclick='submitNoteResponse(this)'>Submit</button>
		    </fieldset>
		</div>
	</div>
  </div>
<!-- FAQ Dialog -->
  <div id="faqdlg" class="textDialog">
	<div id='inner'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div id='dialogtopbar'>
		  <img src="onclogo" height="45" width="65">
		  <span id='dialogmssg'>Frequently Asked Questions (scroll to see all):</span>
		</div>
    	<dl>
    	 	  <dt>Q: What holiday assistance requests will ONC accept?</dt>
		  <dd>A: ONC accepts holiday assistance requests for families with children in the FCPS Centreville,
					Westfield and Chantilly school pyramids who have addresses in one of the following zip 
					codes: Centreville: 20120 or 20121, Chantilly: 20151, Clifton: 20124, Fairfax: 22033 and 
					Fairfax Station: 22039. 
		  </dd>
		  <dt>Q: The name of the family I'm referring isn't listed. Do I select "Refer New Family"?</dt>
		  <dd>A: Any family referred from your school last year should be on the screen. If the 
		  			family name of your referral is not in this list, be sure to use the drop down 
		  			menu at the top left corner of the screen to check for a prior year referral. 
		  			If no prior referral exists, select "Refer New Family".
		  </dd>
	      <dt>Q: We're a Title 1 school with many referrals. Is there an easier way to locate the family name?</dt>
		  <dd>A: Yes. You can enter the family name in the search bar at the top right of the screen.
		  </dd>
<!--		  
		  <dt>Q: Some of the families I submitted are listed as "referred". What does this mean?</dt>
		  <dd>A: We have two organizations in our area who provide holiday assistance, (one food, 
		  		 the other gifts) but to make life a little easier, ONC manages intake for 
		  		 both.
		  </dd>	  
		  <dd><br>			
				Under Meal Status, "referred" means that this referral has been sent to WFCM 
				(Western Fairfax Christian Ministries). Once the status changes to "Referred", 
				any questions regarding food should be directed to Jennie Bush at WFCM.  
				jbush@wfcmva.org.
		  </dd>
-->			  
		</dl>
	</div>
  </div>
<!-- Codes Dialog -->
  <div id="defdlg" class="textDialog">
	<div id='inner'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div id='dialogtopbar'>
		  <img src="onclogo" height="45" width="65">
		  <span id='dialogmssg'>Codes And Status Definitions (scroll to see all):</span>
		</div>
    	<dl>
		  <dt>Codes - Indicate why a family is not being served</dt>
		  <dd>DNS_CODE_HINTS</dd>
	      <dt>Family Status</dt>
		  <dd>
		    <dl>
		      <dt>Unverified</dt>
		      <dd>Indicates the family referral was received by ONC and is pending completion of initial 
		      		verification (duplication checks and address verifications).
		      </dd>
		      <dt>Waitlist</dt>
		       <dd>Indicates the family referral has been received and placed on ONC's gift assistance waitlist.
		       		As resources are available, ONC will make every effort to provide some
		       		gift assistance. Meal assistance cannot be coordinated by ONC for waitlist referrals,
		       		please contact WFCM or another meal assistance provider directly for meal assistance.
		      </dd>	
		      <dt>Verified</dt>
		      <dd>Indicates ONC's initial verification process is complete (duplication checks and address 
		      		verifications). Wait list families who move from Unverified to Verified status should 
		      		be contacted with the time, date and location of gift pick-up and reminded that a photo 
		      		ID matching HOH is required.
		      </dd>	
		      <dt>Contacted</dt>
		      <dd>Applies to ONC Gift Delivery only: Indicates ONC attempted to contact the family by email 
		      		to confirm that gift pick up instructions had been received and gifts would be picked up 
		      		between 1pm - 4pm on DELIVERY_DATE. Referring agents can help ensure gift pick up by asking
		      		the family to respond to ONC's next attempt to contact them.
		      </dd>
		      <dt>Confirmed &#x2713;</dt>
		      <dd>Applies to ONC Gift Pick Up only: The family confirmed receipt of Gift Pick Up instructions and
		      		gifts would be picked up on DELIVERY_DATE from 1pm - 4pm.
		      </dd>
		    </dl>
		  </dd>
		  <dt>Gift Status</dt>
		  <dd>
		    <dl>
		      <dt>Not Requested</dt>
		      <dd>Indicates the family referral did not request holiday gift assistance.</dd>
		      <dt>Requested</dt>
		      <dd>Indicates the family referral requested holiday gift assistance.</dd>
		      <dt>Selected</dt>
		      <dd>Indicates gifts have been selected for each eligible member in the family.</dd>
		      <dt>Received</dt>
		      <dd>Indicates gifts have been received for each eligible member from an ONC gift assistance partner.</dd>
		      <dt>Verified</dt>
		      <dd>Indicates gifts have been double-checked for accuracy in preparation for packaging.</dd>
		      <dt>Packaged</dt>
		      <dd>Indicates gifts have been packaged in preparation for delivery.</dd>
		      <dt>Assigned</dt>
		      <dd>Indicates gift delivery has been assigned to a delivery volunteer and delivery is in process.</dd>
		      <dt>Delivered &#x2713;</dt>
		      <dd>Indicates the families' gifts have been received.</dd>
		      <dt>Attempted</dt>
		      <dd>Indicates that gifts were taken to the Distribution Site, however the gifts were not picked up. Additional
		      		information is being gathered at this time.
		      </dd>
		      <dt>Returned</dt>
		      <dd>Indicates gifts have been returned to ONC.</dd>
		      <dt>Counselor Pick-Up</dt>
		      <dd>Indicates gifts have been given to the counselor who referred the family. The counselor will arrange
		      		delivery directly with the family.
		      </dd>
		      <dt>Referred &#x2713;</dt>
		      <dd>Indicates the family is not in ONC's serving area and a service provider in this family's
		      		area has agreed to accept the referral and serve the family as resources are available.
		      </dd>
		    </dl>
		  </dd>
		  <dt>Meal Status</dt>
		  <dd>
		    <dl>
		      <dt>Not Requested</dt>
		      <dd>Indicates the family referral did not include a request for holiday meal assistance.</dd>
		      <dt>Requested</dt>
		      <dd>Indicates the family referral included a request for holiday meal assistance.</dd>
		      <dt>Assigned</dt>
		      <dd>Indicates ONC has assigned, but not yet referred this request to WFCM or the meal 
		      		assistance provider serving the requesting families area.
		      </dd>
		      <dt>Referred &#x2713;</dt>
		      <dd>Indicates ONC referred the family's meal assistance request to WFCM or another
		      		provider who will fulfill the meal assistance request. (Not applicable for the 2020 season.
		      		WFCM is handling food intake directly.)
		      </dd>
		    </dl>
		  </dd>
        </dl>
	</div>
  </div>
<!-- Success Dialog -->
  <div id="successdlg" class="modalDialog">
	<div class='inner success-dlg regular-width'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div class='dialogtopbar'>
		  <img class='logo-img' src="onclogo">
		  <span class=logospan id="successfamheader">SUCCESS_DIALOG_HEADER</span>
		</div>		
		<div>
		  <div class='column left'><img class='errorimg' src="checkmarkicon"></div>
		  <div class='column right'>SUCCESS_DIALOG_MESSAGE</div>	  
		</div>
	</div>
  </div>  
<!-- Edit Profile Dialog -->
  <div id="editProfile" class="modalDialog">
	<div class='inner full-width'>
	  <div class='dialogtopbar'>
		<img class='logo-img' src="onclogo">
		<span class='logospan'>Verify/Update ONC Profile</span>
	  </div>
	  <div class='edit-background' style='height:230px'>
	  	 <fieldset class='fieldset-auto-width' style='float:left'>
  			  <legend class="legend-major">Contact Information</legend>
  			  <div>
    	  		<label for="userfirstname">Name:</label>
    	  		<input id='userfirstname' type="text" size="12" placeholder="First Name" oninput='checkForProfileChange()'>
    	  		<input id='userlastname' type="text" size="14" placeholder="Last Name" oninput='checkForProfileChange()'>
    		  </div>   		
    		  <div>
    	  		<label for="userorg">Organization:</label>
    	  		<input id='userorg' type="text" size="28" placeholder="Organization" oninput='checkForProfileChange()'>
    	 	  </div>
  			  <div> 
    	  		 <label for="usertitle">Title:</label>
    	 		 <input id='usertitle' type="text" size="34" placeholder="Title" oninput='checkForProfileChange()'>
    	 	  </div>
    	 	  <div>
    	  		<label for="useremail">Email:</label>
    	  		<input id='useremail' type="text" size="34" placeholder="Email address" oninput='checkForProfileChange()'>
    	      </div>
    	 	  <div>
    	  		<label for="workphone">Phone #'s: (Work &amp; Cell):</label>
    	  		<input id='workphone' type="text" size="14" placeholder="Work Phone #" oninput='checkForProfileChange()'>
    	  		<input id='usercellphone' type="text" size="14" placeholder="Cell Phone #" oninput='checkForProfileChange()'>
    	  	  </div>
      	</fieldset>      
		<fieldset>
			<legend class="legend-major">Your School(s) or Organization(s)</legend>  	 
  	    	 <table id="profiletable" style="width:100%">
  		 	  <thead>
    			<tr>
    				<th>Id</th>
        			<th>School or Organization</th>
    			</tr>
    		  </thead>
    		  <tbody>
    		  </tbody>
	    	</table>
	    	<div> 
  		  		<select id="groupselect" title="School or Organization Name" oninput='onGroupSelected(this)'></select>
  			</div>
  		</fieldset>
  	  </div>
      <div class='buttonbar'>
    	<button id="cancel" onclick="onProfileNotChanged()">No Change</button>
        <button id="update" onclick="onUpdateProfile()" disabled>Update</button>
      </div> 
	</div>
  </div>
<!-- Cell phone Warning Dialog -->
  <div id="cellwarningdlg" class="modalDialog">
	<div class='inner regular-width'>
		<div class='dialogtopbar'>
		  <img class='logo-img' src="onclogo">
		  <span class="logospan">Invalid Cell Phone</span>
		</div>	
		<span id='cellwarningmssg'></span>
		<div class='buttonbar'>
      	  <button onclick='addMissingCellPhone()'>Add Cell Phone</button>
      	  <button id='cellwarningignorebtn' onclick='ignoreCellWarning()'>No Cell Phone</button>
    	</div>
	</div>
  </div> 
<!--DNS Code Dialog -->
  <div id="dnscodedlg" class="modalDialog">
	<div class='inner double-width'>
		<a href="#close" title="Close" class="close">X</a>
		<div class='dialogtopbar'>
		  <img class='logo-img' src="onclogo">
		  <span class=logospan id="dnsheader"></span>
		</div>	
		<div>
		<!-- This is the body of the dialog. -->
		    <fieldset class="fieldset-auto-width">
		      <legend id='dnslegend' class="legend-major">DNS Code</legend>
		      <textarea id='dnscode' disabled></textarea>
		    </fieldset>
		</div>
	</div>
  </div>    
<!-- Change Password Dialog -->
  <div id="chgpwdlg" class="modalDialog">
	<div class='inner extended-width'>
		<a href="#close" title="Close" class="close">X</a>
		<div class='dialogtopbar'>
		  <img class='logo-img' src="onclogo">
		  <span class='logospan'>Change Password</span>
		</div>
		<div class='edit-background'>
	  	  <fieldset>
  			<legend class="legend-major">Enter Current and New Passwords</legend>
  			<div id='pw_mssg'>Enter current and new password:</div>
  			<table class='password-table'>
  				<tr>
  					<td>Current Password:</td>
  					<td><input type="password" id="currpw" name="field1" width='100%' oninput='checkChangePWEnable()' autofocus></td>
  				</tr>
  				<tr>
  					<td>New Password:</td>
  					<td><input type="password" id="newpw" name="field2" width='100%' oninput='checkChangePWEnable()'></td>
  				</tr>
  				<tr>
  					<td>Verify New Password:</td>
  					<td><input type="password" id="verifypw" name="field3" width='100%' oninput='checkChangePWEnable()'></td>
  				</tr>
  			</table>
		  </fieldset>
		</div>
    	<div class='buttonbar'>
      	  <button onclick="onCancel()">Cancel</button>
      	  <button id="btnchangepw" onclick="onChangePW()" disabled>Change Password</button>
    	</div> 
	</div>
  </div>
  <!-- Timeout Dialog -->
  <div id="timeoutdlg" class="modalDialog">
	<div class='inner regular-width'>
		<div class='dialogtopbar'>
		  <img class='logo-img' src="onclogo"/>
		  <span id='dialogmssg'>Session Timeout</span>
		</div>
		<p id='to_mssg'>Your session expired due to inactivity</p>
    	<div class='buttonbar'>
      	  <button id="timeoutsubmit" onclick="onSessionTimeout()">Logout</button>
    	</div> 
	</div>
  </div>  
</body>
</html>