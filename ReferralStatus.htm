 <!DOCTYPE html>
<html>
<head lang="en">
  <title>ONC Family Referral Status</title>
  <link rel="stylesheet" type="text/css" href="oncstylesheet.css">
  <link rel="stylesheet" type="text/css" href="oncdialogstylesheet.css">
  <script src="editprofile.js"></script>
  <script src="jquery.js"></script>
  <script>
	var pyFamJson = [];
	var cyFamJson = [];
//	var userJson = {};
//	var profileCBGroups = [];
//	var profileTableGroups = [];
	var bShowSuccessDialog = SHOW_SUCCESS_DIALOG;
	
	var NoteStatus = {NONE: -1,SENT: 1,READ: 2,RESPONDED: 3,LATE: 4};
	var pyColSortStatus = [1,1,1,1,1];
	var cyColSortStatus = [1,1,1,1,1,1,1,1];
	
	sessionStorage.setItem('thanksgivingMealCutoff', "THANKSGIVING_MEAL_CUTOFF");
	sessionStorage.setItem('decemberMealCutoff', "DECEMBER_MEAL_CUTOFF");
	sessionStorage.setItem('waitlistGiftCutoff', "WAITLIST_GIFT_CUTOFF");
	sessionStorage.setItem('editCutoff', "EDIT_CUTOFF");
	sessionStorage.setItem('homelinkVisibility', "HOME_LINK_VISIBILITY");
	
    $( document ).ready(function()
    {
    		//update the nav bar links, set home link presence
    		if(sessionStorage.getItem('homelinkVisibility') === 'visible')
    		{
    			var profileli = document.getElementById('profileli');
    			profileli.parentNode.removeChild(profileli);
    		}
    		else
    		{
    			var homelinkli = document.getElementById('homelinkli');
    			homelinkli.parentNode.removeChild(homelinkli);
    		}

    		// Write on keyup event of keyword prior year seach input element
        $("#pysearch").keyup(function()
        	{
                _this = this;
                // Show only matching TR, hide rest of them
                $.each($("#pyTable tbody tr"), function()
                	{
                    if($(this).text().toLowerCase().indexOf($(_this).val().toLowerCase()) === -1)
                       $(this).hide();
                    else
                       $(this).show();                
                });
        });
        	
        // Write on keyup event of keyword current year seach input element
        $("#cysearch").keyup(function()
        	{
                _this = this;
                // Show only matching TR, hide rest of them
                $.each($("#cyTable tbody tr"), function()
                	{
                    if($(this).find('td').eq(2).text().toLowerCase().indexOf($(_this).val().toLowerCase()) === -1)
                       $(this).hide();
                    else
                       $(this).show();                
                });
        });
    		
   	 	//get the list of years from the data base and put it in the year combo box
    		var dbyearsparams = "callback=?";
    		$.getJSON('dbStatus', dbyearsparams, function(data)
    		{	
			sessionStorage.setItem('curryear', data[data.length-1].id);
			sessionStorage.setItem('prioryear', data[data.length-1].id - 1);
    		
    			document.getElementById('curragtenslbl').innerHTML = data[data.length-1].id.toString() + ' Families Referred By:';
    		
			var combo = document.getElementById("dbYears");
			var yearCombo = document.getElementById("yearlist");
    			for (var i = data.length-1; i >= 0; i--)
    				if(data[i].id != data[data.length-1].id)
    					addComboBoxOption(combo, data[i].id, data[i].id);
    		
    			//determine the color and enabling of the Refer New Family button
    			var btnRNF = document.getElementById('new');
    			if(sessionStorage.getItem('waitlistGiftCutoff') === 'disabled')
    			{
    				btnRNF.style.backgroundColor='Gray';
    	       		btnRNF.disabled = true;
    			}
    			
    			getPYandCYIntialGroupsAgentsAndFamlies();
    		});
    		
    		//if the page load was the result of a successful referral, show the dialog box
	  	if(bShowSuccessDialog)
  			window.location=document.getElementById('successanchor').href;
	  	else
	  	{
	  		var dbyearsparams = "callback=?";
	  		$.getJSON('getstatus', dbyearsparams, function(status)
	  		{
	  			if(status.userstatus === 'Update_Profile')
	  			{
	  			    	showEditProfileDialog();
	  			    	window.location=document.getElementById('editprofileanchor').href;
	  			}
	  		}); 	
	  	}
    });
    
    function onTableColClicked(headerElem)
    {
    		var table = $(headerElem).closest('table');
    		var col = headerElem.getAttribute('data-col');
    		
    		if(table[0].id === 'pyTable')
    		{
    			pyColSortStatus[col] *= -1;
    			var sortOrder =  pyColSortStatus[col];
    		}
    		else
    		{	
    			cyColSortStatus[col] *= -1;
    			var sortOrder =  cyColSortStatus[col];
    		}
    			
    		sortTable(sortOrder,col,table[0].id);
    }
    
    function sortTable(f,n,table)
    {
    		if(table === 'pyTable')
    			var rows = $('#pyTable tbody  tr').get();
    		else
    			var rows = $('#cyTable tbody  tr').get();

    		rows.sort(function(a, b) 
    		{
    			var A = getVal(a);
    			var B = getVal(b);

    			if(A < B)
    				return -1*f;
    			else if(A > B)
    				return 1*f;
    			else
    				return 0;
    		});

    		function getVal(elm)
    		{
    			var v = $(elm).children('td').eq(n).text().toUpperCase();
    			if($.isNumeric(v))
    				v = parseInt(v,10);
    			return v;
    		}

    		$.each(rows, function(index, row) 
    		{
    			if(table === 'pyTable')
    				$('#pyTable').children('tbody').append(row);
    			else
    				$('#cyTable').children('tbody').append(row);
    		});
    }
    
    //this function gets current year agents and families before prior year beacuse we use the
    //current year families to deterimine the button status in the prior year family table
    function getPYandCYIntialGroupsAgentsAndFamlies()
    {
    		var pyGroupCBElem = document.getElementById('pygroups');
    		var cyGroupCBElem = document.getElementById('currgroups');
    		var profileGroupCB = document.getElementById('groupselect');
    		
   	 	//get groups from server and place into the group comboboxes. agentid =-1 defaults
		//to the logged in user
		var groupparams = "agentid=-1&default=on&callback=?";
		$.getJSON('groups', groupparams, function(data)
		{
			//clear the group comboboxes
    			pyGroupCBElem.options.length = 0;
    			cyGroupCBElem.options.length = 0;
		
    			//add the groups for the agent
			for (var i=0; i < data.length; i++)
			{
				addComboBoxOption(pyGroupCBElem, data[i].name, data[i].id);
				addComboBoxOption(cyGroupCBElem, data[i].name, data[i].id);
			}
    			
    			//now that we have the groups, get the prior year agent combo box content
    			var pyAgentCBElem = document.getElementById('pyagents');
    			var cyAgentCBElem = document.getElementById('curragents');
    			pyAgentCBElem.options.length = 0;
    			cyAgentCBElem.options.length = 0;
		
			//populate the current year agent combobox
	    		var agentsparams ="year=" + sessionStorage.getItem('curryear') + "&groupid=" + cyGroupCBElem.value + "&callback=?";
			$.getJSON('agents', agentsparams, function(cyAgentData)
			{
				//add the "Anyone" option if there is more than one agent object
				if(cyAgentData.hasOwnProperty('error'))
					window.location=document.getElementById('timeoutanchor').href;
				else if(cyAgentData.length > 1)
					addComboBoxOption(cyAgentCBElem, "Anyone", -1);
	    	
	    			//add the agents for the year
				for (var i=0; i < cyAgentData.length; i++)
					addComboBoxOption(cyAgentCBElem, cyAgentData[i].name, cyAgentData[i].id);
	    			
	    			//populate the current year families
	    			var familiesparams = "year=" + sessionStorage.getItem('curryear') + 
	    								"&agentid=" + cyAgentCBElem.value + 
	    								"&groupid=" + cyGroupCBElem.value + "&callback=?";
    				$.getJSON('families', familiesparams, function(cyFamData)
    				{
    					if(cyFamData.hasOwnProperty('error'))
    						window.location=document.getElementById('timeoutanchor').href;
    					else
    					{
    						cyFamJson = cyFamData;
    						updateCYTable();
    					}
    					
    					//populate the prior year agent combobox
    					var agentsparams ="year=" + sessionStorage.getItem('prioryear') + "&groupid=" + pyGroupCBElem.value + "&callback=?";
    					$.getJSON('agents', agentsparams, function(pyAgentData)
    					{
    						//add the "Anyone" option if there is more than one agent object
    						if(pyAgentData.hasOwnProperty('error'))
    							window.location=document.getElementById('timeoutanchor').href;
    						else if(pyAgentData.length > 1)
    							addComboBoxOption(pyAgentCBElem, "Anyone", -1);
    			    	
    			    			//add the agents for the prior year
    						for (var i=0; i < pyAgentData.length; i++)
    							addComboBoxOption(pyAgentCBElem, pyAgentData[i].name, pyAgentData[i].id);
    			    			
    			    			//populate prior year families
	    					var familiesparams = "year=" + sessionStorage.getItem('prioryear') + 
	    								"&agentid=" + pyAgentCBElem.value + 
	    								"&groupid=" + pyGroupCBElem.value + "&callback=?";
    						$.getJSON('families', familiesparams, function(pyFamData)
    						{
    							if(pyFamData.hasOwnProperty('error'))
    								window.location=document.getElementById('timeoutanchor').href;
    							else
    							{
    								pyFamJson = pyFamData;
    								updatePYTable();
    							}
    						});
    					});
    				});	    			
			});
		});
    }
    
    function getGroupsAgentsAndFamiliesFromServer(year, groupcb, agentcb)
    {  	
    		//get updated agentJson from server and place into group combobox. agentid =-1 defaults
    		//to the logged in user
    		var groupparams = "agentid=-1&default=on&callback=?";
    		$.getJSON('groups', groupparams, function(data)
    		{
    				//clear the group combobox
        			groupcb.options.length = 0;
    		
	    			//add the groups for the agent
    				for (var i=0; i < data.length; i++)
    					addComboBoxOption(groupcb, data[i].name, data[i].id);
	    	
    				getAgentsAndFamiliesFromServer(agentcb, year, groupcb.value);
    		});    	
    }
    
    function getAgentsAndFamiliesFromServer(agtcb, year, groupid)
    {
    		//clear the agent combobox
		agtcb.options.length = 0;
	
		//get updated agentJson from server and place into combobox
    		var agentsparams ="year=" + year + "&groupid=" + groupid + "&callback=?";
	
		$.getJSON('agents', agentsparams, function(data)
		{
			//add the "Anyone" option if there is more than one agent object
			if(data.hasOwnProperty('error'))
				window.location=document.getElementById('timeoutanchor').href;
			else if(data.length > 1)
				addComboBoxOption(agtcb, "Anyone", -1);
    	
    			//add the agents for the year
			for (var i=0; i < data.length; i++)
				addComboBoxOption(agtcb, data[i].name, data[i].id);
    		
    			//get the families
			getFamiliesFromServer(year, agtcb.value.toString(), groupid);
		});
    }
    
    function getFamiliesFromServer(year, agentid, groupid)
    {
    		var familiesparams = "year=" + year + "&agentid=" + agentid + "&groupid=" + groupid + "&callback=?";
    	
    		$.getJSON('families', familiesparams, function(data)
    		{
    			if(data.hasOwnProperty('error'))
    				window.location=document.getElementById('timeoutanchor').href;
    			else if(year === sessionStorage.getItem('curryear'))
    			{
    				cyFamJson = data;
        			updateCYTable();
    			}
    			else
    			{
    				pyFamJson = data;
    				updatePYTable();
    			}
    		});
    }
    
    function updateFamiliesOnAgentChange(agtcb)
    {
    		//agent changed to "anyone" so just get the families, don't change the groups
    		if(agtcb === document.getElementById("pyagents"))
        		getFamiliesFromServer(sessionStorage.getItem('prioryear'), agtcb.value, document.getElementById('pygroups').value);
    		else
        		getFamiliesFromServer(sessionStorage.getItem('curryear'), agtcb.value, document.getElementById('currgroups').value);	
    }
    
    function updateAgentsOnGroupChange(groupElement)
    {
    		if(groupElement === document.getElementById('currgroups'))
    		{	
    			var agtcb = document.getElementById('curragents');
    			var agtYear = sessionStorage.getItem('curryear');
    		}
    		else
    		{
    			var agtcb = document.getElementById('pyagents');
    			var agtYear = sessionStorage.getItem('prioryear');
    		}
    	
    		//archive the current agent and clear the agent combobox
    		var priorselagentID = agtcb.value;
    		agtcb.options.length = 0;
		
    		//get updated agentJson from server and place into combobox
    		var agentsparams = "year=" + agtYear.toString() + "&groupid=" + groupElement.value +
    					   "&callback=?";
    	
    		$.getJSON('agents', agentsparams, function(data)
    		{
			//add the "Anyone" option if there is more than one agent object
			if(data.hasOwnProperty('error'))
				window.location=document.getElementById('timeoutanchor').href;
			else
			{
				if(data.length > 1)
					addComboBoxOption(agtcb, "Anyone", -1);

		    		//add the agents for the year
	    			for (var i=0; i < data.length; i++)
					addComboBoxOption(agtcb, data[i].name, data[i].id);
		    	
	    			//re-select the previously selected agent, now in the new group
	    			//get the families for the agent
	        		selectCBOptionByValue(agtcb, priorselagentID);
	        		getFamiliesFromServer(agtYear, agtcb.value, groupElement.value);
			}
    		});   		
    }
    
	function addComboBoxOption(combobox, text, value)
	{
		var option = document.createElement("option");
		option.text = text;
    		option.value = value;
    		try 
    		{
        		combobox.add(option, null); //Standard 
    		}
    		catch(error)
    		{
        		combobox.add(option); // IE only
    		}
	}
	
    function updateForYearSelection()
    {
    		//get selected year and update session store
		sessionStorage.setItem("prioryear", document.getElementById("dbYears").value);
		
		//get the groups, agents & families for the prior year selected
		getAgentsAndFamiliesFromServer(document.getElementById('pyagents'), sessionStorage.getItem('prioryear'), document.getElementById('pygroups').value);
    }
    
    function updatePYTable()
    {
    		$("#pytbody").empty();
    		var e = document.getElementById("pyagents");
    		var count = 0;
    		if(e.length > 0)
    		{
    			var agentID = e.value;
    			for(var i=0; i<pyFamJson.length; i++)
			{
    				if(agentID == -1 || agentID == pyFamJson[i].agentID)
    				{
    					addPYTableRow(pyFamJson[i], document.getElementById('pyTable'), "Refer");	//add row to table
    					count++;
    				}
			}
		}
    	
    		//clear the search box
    		var searchbox = document.getElementById('pysearch');
    		searchbox.value = "";
    	
    		//set the quanity in the table
    		document.getElementById('pyfamilycount').innerHTML = ': ' + count.toString();
    }
    
    function updateCYTable()
    {
    		$("#cytbody").empty();
    		var e = document.getElementById("curragents");
    		var count = 0;
    		if(e.length > 0)
    		{
    			var agentID = e.options[e.selectedIndex].value;
    			for(var i=0; i<cyFamJson.length; i++)
			{
    				if(agentID == -1 || agentID == cyFamJson[i].agentID)
    				{
    					addCYTableRow(cyFamJson[i], document.getElementById('cyTable'), "Edit");
    					count++;
    				}
			}
		}
    	
    		//clear the search box
    		var searchbox = document.getElementById('cysearch');
    		searchbox.value = "";
    	
    		//set the quanity in the table
    		document.getElementById('cyfamilycount').innerHTML = ': ' + count.toString();
    }    
    
    function selectCBOptionByValue(cbElement, value)
    {
    		var options = cbElement.options;
    	
   		var index = 0;
   		while(index < cbElement.length && options[index].value != value)
    		index++;
    		
    		if(index < cbElement.length)	
    			cbElement.selectedIndex = index;
    		else
    			cbElement.selectedIndex = 0;
    	
   	 	return cbElement.value;
    }
    
    function addPYTableRow(family, table, buttontext)
    {   
        if (!document.getElementsByTagName) return;
       
        var familyinfo = [family.oncNum, family.HOHFirstName, family.HOHLastName, family.lastNoteStatus,
        						family.dnsCodeAcronym];
        
        var cellwidth = ['68px','152px','160px','68px','68px','68px'];
        
	    var tabBody = table.getElementsByTagName('tbody').item(0);
        row=document.createElement("tr");
        
        var col = 0;
        while(col< 3)	//create the first 3 family info cells
        {
        		var cell = document.createElement("td");
        		cell.appendChild(document.createTextNode(familyinfo[col]));
        		cell.style.width = cellwidth[col++];
        		row.appendChild(cell);
        }
        
        //create a note button, if necessary in column 4
        var cell = document.createElement("td");
        if(family.lastNoteStatus > NoteStatus.NONE)
        {	
        		var notebtn = document.createElement("button");
     		notebtn.style.width = cellwidth[col++];
        		notebtn.innerHTML = 'Note';
        		notebtn.onclick=function() {familyNote(table, family);};
        		cell.appendChild(notebtn);	
   		}
        else
        	{
        		cell.appendChild(document.createTextNode(""));
      		cell.style.width = cellwidth[col++];
        	}
        row.appendChild(cell);
        
        //create a dns button, if necessary in column 5
        var cell = document.createElement("td");
        if(family.dnsCodeID > -1)
        {	
        		var dnsbtn = document.createElement("button");
        		dnsbtn.style.width = cellwidth[col++];
        		dnsbtn.innerHTML = family.dnsCodeAcronym;
        		dnsbtn.onclick=function() {dnsCode(family);};
        		cell.appendChild(dnsbtn);
    		}
        else
        	{
    			cell.appendChild(document.createTextNode(""));
    			cell.style.width = cellwidth[col++];
        	}
        row.appendChild(cell);

        //add the refer or edit button
        btn = document.createElement("button");
        btn.innerHTML = buttontext;
        btn.style.width = cellwidth[col];
        btn.onclick=function() {familyAction(table, family.targetID);};
		setButtonStatus(family, table, btn);
        row.appendChild(btn);
        
        tabBody.appendChild(row);
    }
    
    function addCYTableRow(family, table, buttontext)
    {   
        if (!document.getElementsByTagName) return;
       
        var fstatus;
        	if(family.fstatus === 'Confirmed')
        		fstatus = 'Confirmed \u2713';
        	else
        		fstatus = family.fstatus;
        
        	var dstatus;
        	if(family.giftStatus === 'Delivered')
        		dstatus = 'Delivered \u2713';
        	else if(family.giftStatus === 'Referred')
        		dstatus = 'Referred \u2713';
        	else
        		dstatus = family.giftStatus;
        	
        	var mealstatus;
        	if(family.mealStatus === 'Thanksgiving_Confirmed')
        		mealstatus = 'Thanksgiving \u2713';
        	else if(family.mealStatus === 'December_Confirmed')
        		mealstatus = 'December \u2713';
        	else if(family.mealStatus === 'Both_Confirmed')
        		mealstatus = 'Both \u2713';
        	else if(family.mealStatus === 'None')
        		mealstatus = "Not Requested";
        	else if(family.mealStatus === 'Referred')
        		mealstatus = 'Referred \u2713'
        	else
        		mealstatus = family.mealStatus;
        
        var familyinfo = [family.oncNum, family.HOHFirstName, family.HOHLastName, family.lastNoteStatus,
        						family.dnsCodeAcronym, fstatus, dstatus, mealstatus];
        
        var cellwidth = ['68px', '152px', '160px', '68px', '68px','128px', '128px', '128px', '68px'];
        
	    var tabBody = table.getElementsByTagName('tbody').item(0);
        row=document.createElement("tr");
        
        var col = 0;
        while(col< 3)	//create the first 3 family info cells
        {
        		var cell = document.createElement("td");
        		cell.appendChild(document.createTextNode(familyinfo[col]));
        		cell.style.width = cellwidth[col++];
        		row.appendChild(cell);
        }
        
        //create a note button, if necessary in column 4
        var cell = document.createElement("td");
        if(family.lastNoteStatus > NoteStatus.NONE)
        {	
        		var notebtn = document.createElement("button");
     		notebtn.style.width = cellwidth[col++];
        		notebtn.innerHTML = 'Note';
        		notebtn.onclick=function() {familyNote(table, family);};
        		cell.appendChild(notebtn);	
   		}
        else
        	{
        		cell.appendChild(document.createTextNode(""));
      		cell.style.width = cellwidth[col++];
        	}
        row.appendChild(cell);
        
        //create a dns button, if necessary in column 5
        var cell = document.createElement("td");
        if(family.dnsCodeID > -1)
        {	
        		var dnsbtn = document.createElement("button");
        		dnsbtn.style.width = cellwidth[col++];
        		dnsbtn.innerHTML = family.dnsCodeAcronym;
        		dnsbtn.onclick=function() {dnsCode(family);};
        		cell.appendChild(dnsbtn);
    		}
        else
        	{
    			cell.appendChild(document.createTextNode(""));
    			cell.style.width = cellwidth[col++];
        	}
        row.appendChild(cell);

        //create the last three family info cells
        while(col < familyinfo.length)	//create the three status cells
        {
        		cell = document.createElement("td");
        		cell.appendChild(document.createTextNode(familyinfo[col]));
        		cell.style.width = cellwidth[col++];
        		row.appendChild(cell);
        }
        
        //add the refer or edit button
        btn = document.createElement("button");
        btn.innerHTML = buttontext;
        btn.style.width = cellwidth[col];
        btn.onclick=function() {familyAction(table, family.targetID);};
		setButtonStatus(family, table, btn);
        row.appendChild(btn);
        
        //set row color
		if(family.lastNoteStatus > NoteStatus.NONE && 
				family.lastNoteStatus !== NoteStatus.RESPONDED)
		{
			row.style.backgroundColor = "Yellow";
		}
		else if(family.dnsCodeID > -1)
			row.style.backgroundColor = "Red";
        
        tabBody.appendChild(row);
    }
    
    function setButtonStatus(family, table, btn)
    {
    		if(table=== document.getElementById('pyTable'))
    		{
    			if(alreadyReferred(family.targetID) === true)
            {
            		btn.style.backgroundColor='Red';
            		btn.disabled = true;
            }
            else if(sessionStorage.getItem('waitlistGiftCutoff') === 'disabled')
            {
            		btn.style.backgroundColor='Gray';
            		btn.disabled = true;
            }
   	 	}
    		else if(sessionStorage.getItem('editCutoff') === 'disabled')
        {
            btn.style.backgroundColor='Gray';
            btn.disabled = true;
   	 	}
    }

    function familyAction(table, targetID)
    {
   	 	sessionStorage.setItem("targetid", targetID);
		var params = {}
		params["targetid"] = targetID;
		
		if(table=== document.getElementById('pyTable'))
			post('referral', params);
		else
			post('familyupdate', params);
    }
    
    function familyNote(table, family)
    {
		var year;
		if(table=== document.getElementById('pyTable'))
			year = sessionStorage.getItem('prioryear');
		else
			year =  sessionStorage.getItem('curryear');
		
		document.getElementById("notesfamheader").textContent = 'Notes for ' + family.HOHLastName + ' family';
		
		var noteparams = "year=" + year + "&famid=" + family.id + "&callback=?";
		$.getJSON('familynotes', noteparams, function(famNote)
		{
			var legend = 'Note from ONC: ' + formatDate(famNote.dateChanged);
			document.getElementById('noteslegend').textContent = legend;
			document.getElementById("notesfammssg").textContent = famNote.note;
			document.getElementById("notesresponse").textContent = famNote.response;
			document.getElementById("responsesubmit").value = famNote.id;
			
			if(famNote.status === NoteStatus.RESPONDED)
			{
				legend = 'On ' + formatDate(famNote.timeResponse) + ' ' + famNote.respondedBy + '. responded';
				document.getElementById('responselegend').textContent = legend;
				document.getElementById("responsesubmit").style.backgroundColor='Gray';
				document.getElementById("responsesubmit").disabled = true;
				document.getElementById("notesresponse").disabled = true;
			}
			else
			{
				document.getElementById("responsesubmit").style.backgroundColor='#336699';
				document.getElementById("responsesubmit").disabled = false;
				document.getElementById("notesresponse").disabled = false;
			}
			
			window.location=document.getElementById('notesanchor').href;
		});
    }
    
    function formatDate(date)
    {
    		var minute;
    		if(date.minute < 10)
    			minute = '0' + date.minute;
    		else
    			minute = date.minute;
    		
    		var out = date.month+1 + "/" + date.dayOfMonth + "/" + date.year + " " + date.hourOfDay + ":" + minute;
    		return out;
    }
    
    function submitNoteResponse(button)
    {
    		var year =  sessionStorage.getItem('curryear');
    		var response = document.getElementById('notesresponse').value;
    		if(response.length > 0)
    		{
    			var responseparams = "year=" + year + "&noteID=" + button.value + "&response=" + response + "&callback=?";
    			$.getJSON('noteresponse', responseparams, function(noteResponse)
    			{
    				if(noteResponse.status === NoteStatus.RESPONDED);
    				{
    					var legend = 'On ' + formatDate(noteResponse.timeResponse) 
    								+ ' ' + noteResponse.respondedBy + '. responded';
    					document.getElementById('responselegend').textContent = legend;
    					document.getElementById("responsesubmit").style.backgroundColor='Gray';
    					document.getElementById("responsesubmit").disabled = true;
    					setLastNoteStatusResponded(noteResponse.ownerID);
	    				updateCYTable();
    				}
    			});
    		}
    }
    
    function setLastNoteStatusResponded(famID)
    {
    		var i = 0;
    		while(i< cyFamJson.length && cyFamJson[i].id != famID)
    			i++;
    		
    		if(i< cyFamJson.length)
    			cyFamJson[i].lastNoteStatus = NoteStatus.RESPONDED;
    }
    
    function dnsCode(family)
    {
		
		document.getElementById("dnsheader").textContent = 'DNS Code for ' + family.HOHLastName + ' family';
		
		var codeparams = "code=" + family.dnsCodeID + "&callback=?";
		$.getJSON('dnscode', codeparams, function(dnsCode)
		{
			document.getElementById('dnslegend').textContent = dnsCode.acronym + ' - ' + dnsCode.name;
			document.getElementById("dnscode").textContent = dnsCode.definition;
			
			window.location=document.getElementById('dnscodeanchor').href;
		});
    }
    
    function newFamily()
    {
    		sessionStorage.setItem("targetid", "NNA");
		sessionStorage.setItem("prioryear", sessionStorage.getItem('curryear')-1);
		
		post('newfamily', "");
    }
    
    function alreadyReferred(targetID)
    {
    		var index = 0;
    		while(index < cyFamJson.length && cyFamJson[index].targetID != targetID)
    	    		index++;
    	
    		if(index < cyFamJson.length)
    			return true;
    		else
    	   	 return false;
    }
    
    function onHeaderClicked()
    {
    		alert("Clicked");
    }
     
    function onChangePW() 
    {
    		if(validatePW())
    		{
			var params = {}	
			params["field1"] = document.getElementById('currpw').value;
			params["field2"] = document.getElementById('newpw').value;
    			$.post('reqchangepw', params, function(response)
    			{
    				document.getElementById('message').textContent= response;
    			});
    		
    			document.getElementById('currpw').value = "";
	    		document.getElementById('newpw').value = "";
	    		document.getElementById('verifypw').value = "";
    			window.location=document.getElementById('closepopup').href;
    		}
    }
    
    function onCancel()
    {
		window.location=document.getElementById('closepopup').href;
    }
	
	function validatePW()
    {
		var mssgEl = document.getElementById("pw_mssg");
    		var currpwEl = document.getElementById("currpw");
        var pass1El = document.getElementById("newpw");
        var pass2El = document.getElementById("verifypw");
        var ok = true;
        
        if(currpwEl.value == "")
        {
        		//alert("current password field empty");
            currpwEl.style.borderColor = "#E34234";
            
            mssgEl.style.color = "Red";
            mssgEl.textContent = "Current password not provided, please try again!";
            ok = false;
        }
        else if(pass1El.value == '' || pass2El.value == '')
        	{
        		//alert("Either New or Verify Passwords are empty");
            pass1El.style.borderColor = "#E34234";
            pass2El.style.borderColor = "#E34234";
            
            mssgEl.style.color = "Red";
            mssgEl.textContent = "Please fill out both New and Confirm, try again!";
            ok = false;
        	}
        else if(pass1El.value !== pass2El.value)
        {
            //alert("Either New or Verify Passwords are empty");
            pass1El.style.borderColor = "#E34234";
            pass2El.style.borderColor = "#E34234";
            
            mssgEl.style.color = "Red";
            mssgEl.textContent = "New and Verify passwords don't match, please try again!";
            ok = false;
        }

        return ok;
    }
	
	function onLogoutLink()
	{
		var params = {};
		post('logout', params);
	}
	
	function onSessionTimeout()
	{
		 window.location.assign('timeout');
	}
    
	function post(path, params, method) 
	{
	    method = method || "post"; // Set method to post by default if not specified.

	    // The rest of this code assumes you are not using a library.
	    // It can be made less wordy if you use one.
	    var form = document.createElement("form");
	    form.setAttribute("method", method);
	    form.setAttribute("action", path);

	    for(var key in params) 
	    {
	    		if(params.hasOwnProperty(key))
	        {
	            var hiddenField = document.createElement("input");
	            hiddenField.setAttribute("type", "hidden");
	            hiddenField.setAttribute("name", key);
	            hiddenField.setAttribute("value", params[key]);

	        		form.appendChild(hiddenField);
	        }
	    }

	    document.body.appendChild(form);
	    form.submit();
	}
    </script>
    <style type="text/css">         
    		.constrainer 
        {
         	width: 90%;
			margin-left: auto;
			margin-right: auto;
            background-color: #3CB371;
            border: 1px solid black;
        }
        .constrainer table { overflow-y: scroll; }
        .constrainer thead { display: table-row; }
        .constrainer tbody
        {
            overflow-x: scroll;
            display: block;
            height: 208px;
        }

        .onccol { width: 68px; cursor: pointer; }
        .fncol { width: 152px; cursor: pointer; }
        .lncol { width: 160px; cursor: pointer; }
        .btncol { width: 68px; cursor: pointer; }
        .statcol { width: 128px; cursor: pointer;}
		#newbar { text-align: right; }
		.textDialog 
		{
			position: fixed;
			font-family: Arial, Helvetica, sans-serif;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
			background: rgba(5,5,5,0.4);
			z-index: 99999;
			opacity:0;
			-webkit-transition: opacity 400ms ease-in;
			-moz-transition: opacity 400ms ease-in;
			transition: opacity 400ms ease-in;
			pointer-events: none;
		}
		.textDialog:target 
		{
			opacity:1;
			pointer-events: auto;
		}
		.textDialog > div 
		{
			width: 700px;
			height: 400px;
			position: relative;
			margin: 10% auto;
			padding: 5px 10px 5px 10px;
			border-radius: 10px;
			background: #fff;
			background: -moz-linear-gradient(#fff, #999);
			background: -webkit-linear-gradient(#fff, #999);
			background: -o-linear-gradient(#fff, #999);
		}
		.textDialog label
		{
			float: left;
    			text-align: right;
    			margin-right: 0.5em;
    			display: block;
    			color: black;
    			font-size: 85%;
		}
		dl
		{	height:300px;
			overflow-y:scroll;
		}
		dt
		{
			font-weight: bold;
		}
		dt:before
		{
			content: '\A';
    			white-space: pre;
		}
		dd
		{
			font-style: italic;
		}
        #responsesubmit
        {
   			float:right;
		}
		textarea 
		{
			width: 316px;
			height: 64px;
		}
    </style>  
</head>
<body>
  <a href="#notesdlg" id="notesanchor" style="visibility: hidden">Notes</a>
  <a href="#dnscodedlg" id="dnscodeanchor" style="visibility: hidden">DNS Code</a>
  <a href="#editProfile" id="editprofileanchor" style="visibility: hidden">Edit Profile</a>
  <a href="#timeoutdlg" id="timeoutanchor" style="visibility: hidden">Timeout</a>
  <a href="#successdlg" id="successanchor" style="visibility: hidden">Success</a>
  <header>
    <div id="topbar" class="topbar">
      <img src="onclogo" height="55" width="75"/>
	  <p><span id="banner">USER_NAME, welcome to Our Neighbor's Child's Family Referral System</span><br>
	<span id="message">USER_MESSAGE</span></p>
    </div>
  </header>
  <nav>
   <ul>
	    <li id="homelinkli"><a id='homelink' href='dashboard'>Dashboard</a></li>
	</ul>
	<ul class='floatright'>
		<li id='profileli'><a href="#">Profile <span class="caret"></span></a>
		  <div>
		    <ul>
			  <li><a href="#editProfile" onclick='showEditProfileDialog()'>Edit Profile</a></li>
			  <li><a href="#chgpwdlg">Change Password</a></li>
		    </ul>
		  </div>
	    </li>
	    <li id='hintsli'><a href="#">Helpful Hints <span class="caret"></span></a>
		  <div>
		    <ul>
			  <li><a href="#faqdlg">FAQ's</a></li>
			  <li><a href="#defdlg">Codes/Status Key</a></li>
		    </ul>
		  </div>
	    </li>
	    <li id="logoutli"><a  href="javascript:onLogoutLink()">Logout</a></li>
	</ul>
  </nav>
  <div class='controlbar'>
		<select id="dbYears" name="dbYear" onchange="updateForYearSelection()" ></select>
		<label for="pyagents">Families Referred By</label>
		<select id="pyagents"  onchange="updateFamiliesOnAgentChange(this)" name="pyagtID"></select>
		<label id= pygroupslbl for="pygroups">in Group:</label>
		<select id="pygroups" onchange="updateAgentsOnGroupChange(this)" name="pyGroupID"></select>
		<label id="pyfamilycount" for="pygroups"> : 0</label>
		<span class='floatright'>
		  <label for="pysearch">Search For:</label>
		  <input type="text" id="pysearch" placeholder="Type to search..." />
		</span>
  </div>
  <div class="constrainer">
	<table id="pyTable">
      <thead>
        <tr>
       	<th class='onccol' onclick='onTableColClicked(this)' data-col='0'>ONC #</th>
       	<th class='fncol' onclick='onTableColClicked(this)' data-col='1'>First Name</th>
       	<th class='lncol' onclick='onTableColClicked(this)' data-col='2'>Last Name</th>
       	<th class='btncol' onclick='onTableColClicked(this)' data-col='3'>Note</th>
       	<th class='btncol' onclick='onTableColClicked(this)' data-col='4'>Code</th>
        	<th class='onccol'>Action</th>
        </tr>
      </thead>
      <tbody id='pytbody'>
      </tbody>
	</table>
  </div>
  <div id='newbar' class='controlbar'>
    <button id="new" onclick="newFamily()">Refer New Family</button>
  </div>
  <br><br>
  <div class='controlbar'>
	<label id= curragtenslbl for="curragents">xxxx Families Referred By</label>
	<select id="curragents"  onchange="updateFamiliesOnAgentChange(this)" name="curragtID"></select>
	<label id= currgroupslbl for="currgroups">in Group:</label>
	<select id="currgroups" onchange="updateAgentsOnGroupChange(this)"name="currGroupID"></select>
	<label id="cyfamilycount" for="currgroups"> : 0</label>
	<span class='floatright'>
	  <label for="cysearch">Search For:</label>
	  <input type="text" id="cysearch" placeholder="Type to search..." />
	</span>
  </div>
  <div class="constrainer">
    <table id= 'cyTable'>
      <thead>
        <tr>
       	<th class='onccol' onclick='onTableColClicked(this)' data-col='0'>ONC #</th>
       	<th class='fncol' onclick='onTableColClicked(this)' data-col='1'>First Name</th>
       	<th class='lncol' onclick='onTableColClicked(this)' data-col='2'>Last Name</th>
       	<th class='btncol' onclick='onTableColClicked(this)' data-col='3'>Note</th>
       	<th class='btncol' onclick='onTableColClicked(this)' data-col='4'>Code</th>
        	<th class='statcol' onclick='onTableColClicked(this)' data-col='5'>Family Status</th>
        	<th class='statcol' onclick='onTableColClicked(this)' data-col='6'>Gift Status</th>
        	<th class='statcol' onclick='onTableColClicked(this)' data-col='7'>Meal Status</th>
        	<th class='onccol'>Action</th>
        </tr>
      </thead>
      <tbody id='cytbody'>
      </tbody>
	</table>
  </div>
<!-- Notes Dialog -->
  <div id="notesdlg" class="modalDialog">
	<div class='innerextended'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div class='dialogtopbar'>
		  <img class='logoimg' src="onclogo">
		  <span class=logospan id="notesfamheader"></span>
		</div>
		<div class='greenbackground'>
		<!-- This is the body of the dialog. -->
		    <fieldset class="fieldset-auto-width">
		      <legend id='noteslegend' class="legend-major">Note From ONC</legend>
		      <textarea id='notesfammssg' disabled></textarea>
		    </fieldset>
		    <fieldset class="fieldset-auto-width">
		      <legend id='responselegend' class="legend-major">Response</legend>
		      <textarea id='notesresponse'></textarea>
		      <button id="responsesubmit" onclick='submitNoteResponse(this)'>Submit</button>
		    </fieldset>
		</div>
	</div>
  </div>
<!--DNS Code Dialog -->
  <div id="dnscodedlg" class="modalDialog">
	<div class='innerextended'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div class='dialogtopbar'>
		  <img class='logoimg' src="onclogo">
		  <span class=logospan id="dnsheader"></span>
		</div>
		<div class='greenbackground'>
		<!-- This is the body of the dialog. -->
		    <fieldset class="fieldset-auto-width">
		      <legend id='dnslegend' class="legend-major">DNS Code</legend>
		      <textarea id='dnscode' disabled></textarea>
		    </fieldset>
		</div>
	</div>
  </div>  
<!-- Edit Profile Dialog -->
  <div id="editProfile" class="modalDialog">
	  <div class='innerextended'>
		<div class='dialogtopbar'>
		  <img class='logoimg' src="onclogo">
		  <span class='logospan'>Verify/Update ONC Profile</span>
	  </div>
	  <div class='greenbackground'>
	  <fieldset class="fieldset-auto-width">
  		<legend class="legend-major">Contact Information</legend>
  		<div class= 'profilediv'>
    	  		<label for="userfirstname">Name:</label>
    	  		<input id='userfirstname' type="text" size="16" placeholder="First Name" onchange='checkForProfileChange()'>
    	  		<input id='userlastname' type="text" size="16" placeholder="Last Name" onchange='checkForProfileChange()'>
    	  	</div>
    	  	<div class= 'profilediv'>
    	  		<label for="userorg" >Organization:</label>
    	  		<input id='userorg' type="text" size="28" placeholder="Organization" onchange='checkForProfileChange()'>
    	  	</div>
    	  	<div class= 'profilediv'>
    	  		<label for="usertitle" >Title:</label>
    	  		<input id='usertitle' type="text" size="33" placeholder="Title" onchange='checkForProfileChange()'>
    	  	</div>
    	  	<div class= 'profilediv'>
    	  		<label for="useremail" >Email:</label>
    	  		<input id='useremail' type="text" size="35" placeholder="Email address" onchange='checkForProfileChange()'>
    	  	</div>
    	  	<div class= 'profilediv'>
    	  		<label for="userphone" >Phone:</label>
    	  		<input id='userphone' type="text" size="22" placeholder="Work Phone #" onchange='checkForProfileChange()'>
    	  	</div>
    	  </fieldset>
    	  </div>
    	  <div class='greenbackground'>
    	  <fieldset class="fieldset-auto-width">
    	  <legend class="legend-major">Your School(s) or Organization(s)</legend>
  	    <table id="grouptable">
  		  <thead>
    			<tr>
        			<th width='320px' >School or Organization</th>
        			<th class='onccol'>Action</th>
    			</tr>
    		  </thead>
    		  <tbody id="grouptbody">
    		  </tbody>
	    </table>
	    <div class='profilediv'> 
  		  <select id="groupselect" title="School or Organization Name" oninput='onGroupSelected(this)'></select>
  		  <button id='addgroup' value='unchanged' type="button" onclick="addGroup()" style="background-color:Grey" title="Click to add school or organization" disabled>Add School/Org.</button>
  		</div>
  </fieldset>
  </div>
    	  <div id='buttonbar'>
    	    <button id="cancel" onclick="onProfileNotChanged()">No Change</button>
        <button id="update" value='unchanged' style="background-color:Grey" onclick="onUpdateProfile(this)" disabled>Update</button>
    	  </div> 
	</div>
  </div>
<!-- FAQ Dialog -->
  <div id="faqdlg" class="textDialog">
	<div id='inner'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div id='dialogtopbar'>
		  <img src="onclogo" height="45" width="65">
		  <span id='dialogmssg'>Frequently Asked Questions (scroll to see all):</span>
		</div>
    	<dl>
    	 	  <dt>Q: What holiday assistance requests will ONC accept?</dt>
		  <dd>A: ONC accepts holiday assistance requests for families with children in the FCPS Centreville,
					Westfield and Chantilly school pyramids who have addresses in one of the following zip 
					codes: Centreville: 20120 or 20121, Chantilly: 20151, Clifton: 20124, Fairfax: 22033 and 
					Fairfax Station: 22039. 
		  </dd>
		  <dt>Q: The name of the family I'm referring isn't listed. Do I select "Refer New Family"?</dt>
		  <dd>A: Any family referred from your school last year should be on the screen. If the 
		  			family name of your referral is not in this list, be sure to use the drop down 
		  			menu at the top left corner of the screen to check for a prior year referral. 
		  			If no prior referral exists, select "Refer New Family".
		  </dd>
	      <dt>Q: We're a Title 1 school with many referrals. Is there an easier way to locate the family name?</dt>
		  <dd>A: Yes. You can enter the family name in the search bar at the top right of the screen.
		  </dd>
		  <dt>Q: Some of the families I submitted are listed as "referred". What does this mean?</dt>
		  <dd>A: We have two organizations in our area who provide holiday assistance, (one food, 
		  		 the other gifts) but to make life a little easier, ONC manages intake for 
		  		 both.
		  </dd><dd><br>			
				Under Meal Status, "referred" means that this referral has been sent to WFCM 
				(Western Fairfax Christian Ministries). Once the status changes to "Referred", 
				any questions regarding food should be directed to Jennie Bush at WFCM.  
				jbush@wfcmva.org.
		  </dd>
		</dl>
	</div>
  </div>
<!-- Codes Dialog -->
  <div id="defdlg" class="textDialog">
	<div id='inner'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div id='dialogtopbar'>
		  <img src="onclogo" height="45" width="65">
		  <span id='dialogmssg'>Codes And Status Definitions (scroll to see all):</span>
		</div>
    	<dl>
		  <dt>Codes - Indicate why a family is not being served</dt>
		  <dd>DNS_CODE_HINTS</dd>
	      <dt>Family Status</dt>
		  <dd>
		    <dl>
		      <dt>Unverified</dt>
		      <dd>Indicates the family referral was received by ONC and is pending completion of initial 
		      		verification (duplication checks and address verifications).
		      </dd>
		      <dt>Waitlist</dt>
		       <dd>Indicates the family referral has been received and placed on ONC's gift assistance waitlist.
		       		As resources are available, ONC will make every effort to provide some
		       		gift assistance. Meal assistance cannot be coordinated by ONC for waitlist referrals,
		       		please contact WFCM or another meal assistance provider directly for meal assistance.
		      </dd>	
		      <dt>Verified</dt>
		      <dd>Indicates ONC's initial verification process is complete (duplication checks and address 
		      		verifications). Wait list families who move from Unverified to Verified status should 
		      		be contacted with the time, date and location of gift pick-up and reminded that a photo 
		      		ID matching HOH is required.
		      </dd>	
		      <dt>Contacted</dt>
		      <dd>Applies to ONC Gift Delivery only: Indicates ONC attempted to contact the family by telephone or email to confirm an
		      		adult would be home between 1pm - 4pm on DELIVERY_DATE to accept gifts.
		      		We were unable to confirm an adult would be home. Referring agents can help
		      		ensure delivery by asking the family to respond to ONC's next attempt to contact them.
		      </dd>
		      <dt>Confirmed &#x2713;</dt>
		      <dd>Applies to ONC Gift Delivery only: The family confirmed an adult would be home on
		      		DELIVERY_DATE from from 1pm - 4pm to accept gift delivery.
		      </dd>
		    </dl>
		  </dd>
		  <dt>Gift Status</dt>
		  <dd>
		    <dl>
		      <dt>Not Requested</dt>
		      <dd>Indicates the family referral did not request holiday gift assistance.</dd>
		      <dt>Requested</dt>
		      <dd>Indicates the family referral requested holiday gift assistance.</dd>
		      <dt>Selected</dt>
		      <dd>Indicates gifts have been selected for each eligible member in the family.</dd>
		      <dt>Received</dt>
		      <dd>Indicates gifts have been received for each eligible member from an ONC gift assistance partner.</dd>
		      <dt>Verified</dt>
		      <dd>Indicates gifts have been double-checked for accuracy in preparation for packaging.</dd>
		      <dt>Packaged</dt>
		      <dd>Indicates gifts have been packaged in preparation for delivery.</dd>
		      <dt>Assigned</dt>
		      <dd>Indicates gift delivery has been assigned to a delivery volunteer and delivery is in process.</dd>
		      <dt>Delivered &#x2713;</dt>
		      <dd>Indicates gifts have been successfully delivered to the family's delivery address.</dd>
		      <dt>Attempted</dt>
		      <dd>Indicates that our volunteer attempted to deliver the family's gifts, by was unable to complete
		      		the delivery. Additional information is being gathered at this time.
		      </dd>
		      <dt>Returned</dt>
		      <dd>Indicates gifts have been returned to ONC after one or more failed delivery attempts.</dd>
		      <dt>Counselor Pick-Up</dt>
		      <dd>Indicates gifts have been given to the counselor who referred the family. The counselor will arrange
		      		delivery directly with the family.
		      </dd>
		      <dt>Referred &#x2713;</dt>
		      <dd>Indicates the family is not in ONC's serving area and a service provider in this family's
		      		area has agreed to accept the referral and serve the family as resources are available.
		      </dd>
		    </dl>
		  </dd>
		  <dt>Meal Status</dt>
		  <dd>
		    <dl>
		      <dt>Not Requested</dt>
		      <dd>Indicates the family referral did not include a request for holiday meal assistance.</dd>
		      <dt>Requested</dt>
		      <dd>Indicates the family referral included a request for holiday meal assistance.</dd>
		      <dt>Assigned</dt>
		      <dd>Indicates ONC has assigned, but not yet referred this request to WFCM or the meal 
		      		assistance provider serving the requesting families area.
		      </dd>
		      <dt>Referred &#x2713;</dt>
		      <dd>Indicates ONC referred the family's meal assistance request to WFCM or another
		      		provider who will fulfill the meal assistance request.
		      </dd>
		    </dl>
		  </dd>
        </dl>
	</div>
  </div>
 <!-- Change Password Dialog -->
  <div id="chgpwdlg" class="modalDialog">
	<div class='inner'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div class='dialogtopbar'>
		  <img class='logoimg' src="onclogo">
		  <span class='logospan'>Change Password</span>
		</div>
		<p id='pw_mssg'>Enter current and new password:</p>
    	<p><label class='lbl_pw' for="currpw">Current Password:</label>
    	<input class='inp_pw' type="password" id="currpw" name="field1" autofocus></p>
    	<p><label class='lbl_pw' for="newpw">New Password:</label>
    	<input class='inp_pw' type="password" id="newpw" name="field2"><br></p>
    	<p><label class='lbl_pw' for="verifypw" >Verify Password:</label>
    	<input class='inp_pw' type="password" id="verifypw" name="field3"></p>
    	<div id='buttonbar'>
      	  <button id="cancel" onclick="onCancel()">Cancel</button>
      	  <button id="submit" onclick="onChangePW()">Change Password</button>
    	</div> 
	</div>
  </div>
<!-- Success Dialog -->
  <div id="successdlg" class="modalDialog">
	<div class='inner'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div class='dialogtopbar'>
		  <img class='logoimg' src="onclogo">
		  <span class=logospan id="successfamheader">SUCCESS_DIALOG_HEADER</span>
		</div>
		<div>
		  <span class='verifspan'><img class='errorimg' src="checkmarkicon"></span>
		  <span id='successfammssg'>SUCCESS_DIALOG_MESSAGE</span>
		</div>
	</div>
  </div>  
<!-- Timeout Dialog -->
  <div id="timeoutdlg" class="modalDialog">
	<div id='inner'>
		<div class='dialogtopbar'>
		  <img class='logoimg' src="onclogo">
		  <span class=logospan id="successfamheader">Session Timeout</span>
		</div>
		<p id='to_mssg'>Your session expired due to inactivity</p>
    	<div id='buttonbar'>
      	  <button id="submit" onclick="onSessionTimeout()">Logout</button>
    	</div> 
	</div>
  </div>
</body>
</html>