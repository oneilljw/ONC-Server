 <!DOCTYPE html>
<html>
<head lang="en">
  <meta charset="UTF-8">
  <title>ONC Family Assistance Request</title>
  <script src="//code.jquery.com/jquery-1.10.2.js"></script>
  <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
  <link rel="stylesheet" type="text/css" href="oncstylesheet.css">
  <link rel="stylesheet" type="text/css" href="oncdialogstylesheet.css">
  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css">
  <script> 
  	var childrenJson= [];
  	var adultsJson= [];
  	var hohAddressGood = false;
  	var delAddressGood = false;
  	var errorColor = '#FF9999';
  	var bVerifyDeliveryAddressEnabled = true;
  	
  	$(function() {
  	    $( "#childdob" ).datepicker({
  	      yearRange: '-19:+0',
  	      dayNamesMin: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
  	      changeMonth: true,
  	      changeYear: true
  	    });
  	  });
  	
  	$( document ).ready(function()
	{
  		//set the hidden values
  		document.getElementById('year').value= new Date().getFullYear().toString();
  		document.getElementById('token').value= sessionStorage.getItem("token");
  		document.getElementById('targetid').value= sessionStorage.getItem("targetid");
  		
  		//update the nav bar links with token
  		document.getElementById('logoutlink').href="logout?token=" + sessionStorage.getItem('token'); 
  		document.getElementById('homelink').href="startpage?token=" + sessionStorage.getItem('token')
		 +'&year=' + sessionStorage.getItem('curryear') +'&famref=' + sessionStorage.getItem('famref');
  		
  		var urlmode = window.location.href;
  		if(urlmode.indexOf("referral") > -1)
  		{
  			
  			familyparams = "token=" + sessionStorage.getItem("token") + "&" +
				"year=" + sessionStorage.getItem("prioryear") + "&" +
				"targetid=" + sessionStorage.getItem("targetid") + "&" +
				"callback=?";

			$.getJSON('getfamily', familyparams, function(family)
			{
				document.getElementById('hohfn').value= family.HOHFirstName;
				document.getElementById('hohln').value= family.HOHLastName;
			});
			
  			childrenparams=  "token=" + sessionStorage.getItem("token") + "&" +
							"year=" + sessionStorage.getItem("prioryear") + "&" +
							"targetid=" + sessionStorage.getItem("targetid") + "&" +
							"callback=?";
  			
  			$.getJSON('children', childrenparams, function(data)
  			{
  		     	childrenJson = data;
  		     	updateChildTable();
  		     	updateWishTable();
  			});
  		
  			adultsparams=  "token=" + sessionStorage.getItem("token") + "&" +
  			"year=" + sessionStorage.getItem("prioryear") + "&" +
			"targetid=" + sessionStorage.getItem("targetid") + "&" +
			"callback=?";
  			
  			$.getJSON('adults', adultsparams, function(data)
  			{
  		     	adultsJson = data;
  		     	updateAdultTable();
  			});
  		}	
  		
  		$(function() {
  		    $("form input").keypress(function (e) {
  		        if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
  		            $('button[type=submit] .default').click();
  		            return false;
  		        } else {
  		            return true;
  		        }
  		    });
  		});
  		
  		$('html').bind('keypress', function(e)
  		{
  			if(e.keyCode == 13)
  			{
  				return false;
  			}
  		});
	});	
	
	function updateChildTable()
    {
    	$("#tchildbody").empty();
    	
    	for(var i=0; i<childrenJson.length; i++)
		{
    		addChildTableRow(i, childrenJson[i]);	//add row to table
		}
    }
	
	function updateWishTable()
    {
    	$("#twishbody").empty();
    	
    	for(var i=0; i<childrenJson.length; i++)
		{
    		addWishTableRow(i, childrenJson[i]);	//add row to table
		}
    }
	
	function updateAdultTable()
    {
    	$("#tadultbody").empty();
    	
    	for(var i=0; i<adultsJson.length; i++)
		{
    		addAdultTableRow(i, adultsJson[i]);	//add row to table
		}
    }
	
	function addChildTableRow(cnum, child)
    {
        var childinfo = [child.firstname, child.lastname, child.sDOB, child.gender, child.school];
        var fieldname = ["childfn", "childln", "childdob", "childgender", "childschool"];
        var fieldsize = [15, 16, 11, 11, 20];
        
	    var tabBody = document.getElementById("childtable").getElementsByTagName('tbody').item(0);
        row=document.createElement("tr");
    	
        for(index=0; index < childinfo.length; index++)	//create the child info cells
        {
        	cell= document.createElement("td");
    	    content= document.createElement("input");
 	    	content.type="text";
 	    	content.name=fieldname[index] + cnum;
        	content.value = childinfo[index];
        	content.setAttribute("size", fieldsize[index]);
        	
        	if(index === 4)	//school field is required, not supported in safari
        		content.required = true
        		
        	cell.appendChild(content);
        	row.appendChild(cell);
        }
        
        btn = document.createElement("button");
        btn.value=cnum;
        btn.type="button";
        btn.innerHTML = "Remove";
        btn.onclick=function() {removeChild(cnum);};
        row.appendChild(btn);
        
        tabBody.appendChild(row);
    }
	
	function addWishTableRow(cnum, child)
    {
		var childinfo= [child.firstname, getAge(child.sDOB) + " " + child.gender.toLowerCase()];
		var childfieldsize= [15, 14];
		var wishplaceholder=["Wish 1", "Wish 2", "Wish 3", "Alt. Wish"];
        
	    var tabBody = document.getElementById("wishtable").getElementsByTagName('tbody').item(0);
        row=document.createElement("tr");
         
        for(index=0; index < childinfo.length; index++)	//create the child info cells
        {
        	cell= document.createElement("td");
    	    content= document.createElement("input");
 	    	content.type="text";
        	content.value = childinfo[index];
        	content.readOnly = true;
        	content.setAttribute("size", childfieldsize[index]);
        	cell.appendChild(content);
        	row.appendChild(cell);
        }

        for(wn=0; wn<wishplaceholder.length; wn++)
        {
        	var wlcell= document.createElement("td");
        	var wish= document.createElement("input");
        	wish.type="text";
        	wish.name="wish" + cnum + wn;
        	wish.id="wish" + cnum + wn;
        	wish.disabled = true;
        	wish.placeholder= wishplaceholder[wn] + " for " + child.firstname;
        	wish.setAttribute("size", 22);
        	wlcell.appendChild(wish);
        	row.appendChild(wlcell);
        }
        
        tabBody.appendChild(row);
    }
	
	function addAdultTableRow(anum, adult)
    {
	    var tabBody = document.getElementById("adulttable").getElementsByTagName('tbody').item(0);
        row=document.createElement("tr");
        
        cell= document.createElement("td");
        adultname= document.createElement("input");
        adultname.type="text";
        adultname.name="adultname" + anum;
        adultname.value = adult.name;
        adultname.setAttribute("size", 27);
        cell.appendChild(adultname);
        row.appendChild(cell);
        
        cell= document.createElement("td");
        var adultgender= document.createElement("input");
        adultgender.type="text";
        adultgender.name="adultgender" + anum;
        adultgender.value = adult.gender;
        adultgender.setAttribute("size", 11);
        cell.appendChild(adultgender);
        row.appendChild(cell);
        
        var btn = document.createElement("button");
        btn.value= anum;
        btn.type="button";
        btn.innerHTML = "Remove";
        btn.onclick=function() {removeAdult(anum);};
        row.appendChild(btn);
        
        tabBody.appendChild(row);
    }
	
	function addChild()
	{
		var childfnElement = document.getElementById('childfn');
		var childlnElement = document.getElementById('childln');
		var childschoolElement = document.getElementById('childschool');
		
		if(childfnElement.value === "")
			childfnElement.style.background = errorColor;
		else if(childlnElement.value === "")
			childlnElement.style.background = errorColor;
		else if(childschoolElement.value === "")
			childschoolElement.style.background = errorColor;
		else
		{
       		var child = {};
        	child["firstname"] = childfnElement.value;
        	child["lastname"] = childlnElement.value;
        	child["sDOB"] =	document.getElementById('childdob').value;
        	child["gender"] = document.getElementById('childgender').value;
        	child["school"] = document.getElementById('childschool').value;
//	   	 	child["age"] = getAge(child["sDOB"]);
        	childrenJson.push(child);
        
        	updateChildTable();
        	updateWishTable();
        
        	clearAddChild();
		}
	}
	
	function clearAddChild()
	{
		var childfnElement = document.getElementById('childfn');
		var childlnElement = document.getElementById('childln');
		var childschoolElement = document.getElementById('childschool');
		
		childfnElement.value="";
        childlnElement.value="";
        document.getElementById('childdob').value="";
        document.getElementById('childgender').value="Boy";
        document.getElementById('childschool').value="";
        
        childfnElement.style.background = '#FFFFFF';
        childlnElement.style.background = '#FFFFFF';
        childschoolElement.style.background = '#FFFFFF'; 
	}
	
	function removeChild(index)
	{
		childrenJson.splice(index, 1);
		
		updateChildTable();
        updateWishTable();	
	}
	
	function addAdult()
	{
		var adultnameElement = document.getElementById('adultname');
		
		if(adultnameElement.value === "")
			adultnameElement.style.background = errorColor;
		else
		{	
       		var adult = {};
        	adult["name"] = adultnameElement.value;
        	adult["gender"] = document.getElementById('adultgender').value;
        	adultsJson.push(adult);
        
        	updateAdultTable();
        
        	clearAddAdult();
		}
	}
	
	function clearAddAdult()
	{
		var adultnameElement = document.getElementById('adultname');
		
		adultnameElement.value="";
        document.getElementById('adultgender').value="Male";
        
        adultnameElement.style.background = '#FFFFFF';
	}
	
	function removeAdult(index)
	{
		adultsJson.splice(index, 1);
		updateAdultTable();
	}
	
	function getAge(birthdate)
	{
		var curryear = new Date().getFullYear();
		var xmasday = new Date(curryear,11,25,0,0,0,0);
		var birthdate= new Date(birthdate);
		
		var age= [];
		
		if(birthdate >= xmasday)
		{
			age.push('Newborn');
		}
		else
		{
	    	var y= [xmasday.getFullYear(), birthdate.getFullYear()],
	    	ydiff= y[0]-y[1],
	    	m= [xmasday.getMonth(), birthdate.getMonth()],
	    	mdiff= m[0]-m[1],
	    	d= [xmasday.getDate(), birthdate.getDate()],
	    	ddiff= d[0]-d[1];

	    	if(mdiff < 0 || (mdiff=== 0 && ddiff<0))--ydiff;
	    	if(mdiff<0) mdiff+= 12;
	    	if(ddiff<0)
	    	{
	        	birthdate.setMonth(m[1]+1, 0);
	        	ddiff= birthdate.getDate()-d[1]+d[0];
	        	--mdiff;
	    	}
	    	
	    	if(ydiff> 0) age.push(ydiff+ ' yr. old');
	    	else if(mdiff>= 0) age.push(mdiff+ ' mos. old');
		}
	    	return age.join('');
	}
	
	function sameAddressClicked(cb)
	{
		var addrInputElements = [document.getElementById('housenum'),
				                    document.getElementById('street'),
				                    document.getElementById('unit')];
		
		var addrSelectElements = [document.getElementById('city'),
		                          document.getElementById('zipcode')];
		                          
		var delInputElements = [document.getElementById('delhousenum'),
				                 document.getElementById('delstreet'),
				                 document.getElementById('delunit')];
		
		var delSelectElements = [document.getElementById('delcity'),
		                          document.getElementById('delzipcode')];
		
		if(cb.checked == true)
		{	
			//no need to check the delivery address, it's just a copy
			bVerifyDeliveryAddressEnabled = false;
			
			//copy the address input elements to delivery address elements
			for(var i=0; i<addrInputElements.length; i++)
				delInputElements[i].value = addrInputElements[i].value;
			
			delSelectElements[0].value = addrSelectElements[0].value;
			cityChanged('delcity');
			delSelectElements[1].value = addrSelectElements[1].value;
			
			//set read only
			for(var i=0; i<addrInputElements.length; i++)
			{
				delInputElements[i].readOnly = true;
				addrInputElements[i].readOnly = true;
			}
		}
		else
		{
			//clear the delivery address elements
			for(var i=0; i<delInputElements.length; i++)
				delInputElements[i].value = "";
			
			delSelectElements[0].selectedIndex = 0;
			cityChanged('delcity');
			delSelectElements[1].selectedIndex = 0;
		
			//clear read only for delivery input elements
			for(var i=0; i<addrInputElements.length; i++)
			{
				delInputElements[i].readOnly = false;
				addrInputElements[i].readOnly = false;
			}
			
			//clear background color
			changeAddressBackground(delInputElements, '#FFFFFF')
			changeAddressBackground(delSelectElements, '#FFFFFF')
			
			//enable checking of the delivery address, no longer a copy
			bVerifyDeliveryAddressEnabled = true;
		}
	}
	
	function cityChanged(elementName)
	{
		if(elementName === 'city')
			var zipElement = document.getElementById('zipcode')
		else
			var zipElement = document.getElementById('delzipcode')	
			
		removeOptions(zipElement);
		
		var cityElement = document.getElementById(elementName);

		if(cityElement.value === 'Centreville')
		{
			zipElement.options[0] = new Option('20120', '20120');
			zipElement.options[1] = new Option('20121', '20121');
		}
		else if(cityElement.value === 'Chantilly')
		{
			zipElement.options[0] = new Option('20151', '20151');
		}
		else if(cityElement.value === 'Clifton')
		{
			zipElement.options[0] = new Option('20124', '20124');
		}
		else if(cityElement.value === 'Fairfax')
		{
			zipElement.options[0] = new Option('20151', '20151');
			zipElement.options[1] = new Option('22030', '22030');
			zipElement.options[2] = new Option('22031', '22031');
			zipElement.options[3] = new Option('22032', '22032');
			zipElement.options[4] = new Option('22033', '22033');
			zipElement.options[5] = new Option('22037', '22037');
			zipElement.options[6] = new Option('22039', '22039');
		}
		else if(cityElement.value === 'Fairfax Station')
		{
			zipElement.options[0] = new Option('22039', '22039');
		}
		else if(cityElement.value === 'Alexandria')
		{
			zipElement.options[0] = new Option('22302', '22302');
			zipElement.options[1] = new Option('22303', '22303');
			zipElement.options[2] = new Option('22304', '22304');
			zipElement.options[3] = new Option('22306', '22306');
			zipElement.options[4] = new Option('22307', '22307');
			zipElement.options[5] = new Option('22308', '22308');
			zipElement.options[6] = new Option('22309', '22309');
			zipElement.options[7] = new Option('22310', '22310');
			zipElement.options[8] = new Option('22311', '22311');
			zipElement.options[9] = new Option('22312', '22312');
			zipElement.options[10] = new Option('22315', '22315');
		}
		else if(cityElement.value === 'Annandale')
		{
			zipElement.options[0] = new Option('22003', '22003');
		}
		else if(cityElement.value === 'Arlington')
		{
			zipElement.options[0] = new Option('22203', '22203');
			zipElement.options[1] = new Option('22204', '22204');
			zipElement.options[2] = new Option('22206', '22206');
			zipElement.options[3] = new Option('22207', '22207');
			zipElement.options[4] = new Option('22213', '22213');
		}
		else if(cityElement.value === 'Baileys Crossroads')
		{
			zipElement.options[0] = new Option('22041', '22041');
		}
		else if(cityElement.value === 'Belleview')
		{
			zipElement.options[0] = new Option('22307', '22307');
		}
		else if(cityElement.value === 'Burke')
		{
			zipElement.options[0] = new Option('22015', '22015');
		}
		else if(cityElement.value === 'Cameron Station')
		{
			zipElement.options[0] = new Option('22304', '22304');
		}
		else if(cityElement.value === 'Dunn Loring')
		{
			zipElement.options[0] = new Option('22027', '22027');
		}
		else if(cityElement.value === 'Engleside')
		{
			zipElement.options[0] = new Option('22309', '22309');
		}
		else if(cityElement.value === 'Falls Church')
		{
			zipElement.options[0] = new Option('22041', '22041');
			zipElement.options[1] = new Option('22042', '22042');
			zipElement.options[2] = new Option('22043', '22043');
			zipElement.options[3] = new Option('22044', '22044');
			zipElement.options[4] = new Option('22046', '22046');
		}
		else if(cityElement.value === 'Fort Belvoir')
		{
			zipElement.options[0] = new Option('22060', '22060');
		}
		else if(cityElement.value === 'Franconia')
		{
			zipElement.options[0] = new Option('22310', '22310');
		}
		else if(cityElement.value === 'Great Falls')
		{
			zipElement.options[0] = new Option('22066', '22066');
		}
		else if(cityElement.value === 'Greenway')
		{
			zipElement.options[0] = new Option('22067', '22067');
		}
		else if(cityElement.value === 'Herndon')
		{
			zipElement.options[0] = new Option('20170', '20170');
			zipElement.options[1] = new Option('20171', '20171');
			zipElement.options[2] = new Option('20190', '20190');
			zipElement.options[3] = new Option('20191', '20191');
			zipElement.options[4] = new Option('20194', '20194');
		}
		else if(cityElement.value === 'Jefferson Manor')
		{
			zipElement.options[0] = new Option('22303', '22303');
		}
		else if(cityElement.value === 'Kingstowne')
		{
			zipElement.options[0] = new Option('22315', '22315');
		}
		else if(cityElement.value === 'Lorton')
		{
			zipElement.options[0] = new Option('22079', '22079');
			zipElement.options[1] = new Option('22199', '22199');
		}
		else if(cityElement.value === 'Mason Neck')
		{
			zipElement.options[0] = new Option('22079', '22079');
		}
		else if(cityElement.value === 'McLean')
		{
			zipElement.options[0] = new Option('22101', '22101');
			zipElement.options[1] = new Option('22102', '22102');
			zipElement.options[2] = new Option('22103', '22103');
			zipElement.options[3] = new Option('22106', '22106');
		}
		else if(cityElement.value === 'Merrifield')
		{
			zipElement.options[0] = new Option('22081', '22081');
			zipElement.options[1] = new Option('22116', '22116');
		}
		else if(cityElement.value === 'Mosby')
		{
			zipElement.options[0] = new Option('22042', '22042');
		}
		else if(cityElement.value === 'Mount Vernon')
		{
			zipElement.options[0] = new Option('22121', '22121');
		}
		else if(cityElement.value === 'Newington')
		{
			zipElement.options[0] = new Option('22122', '22122');
		}
		else if(cityElement.value === 'North Springfield')
		{
			zipElement.options[0] = new Option('22151', '22151');
		}
		else if(cityElement.value === 'Oak Hill')
		{
			zipElement.options[0] = new Option('22171', '22171');
		}
		else if(cityElement.value === 'Oakton')
		{
			zipElement.options[0] = new Option('22124', '22124');
		}
		else if(cityElement.value === 'Pimmit')
		{
			zipElement.options[0] = new Option('22043', '22043');
		}
		else if(cityElement.value === 'Reston')
		{
			zipElement.options[0] = new Option('20190', '20190');
			zipElement.options[1] = new Option('20191', '20191');
			zipElement.options[2] = new Option('20194', '20194');
		}
		else if(cityElement.value === 'Seven Corners')
		{
			zipElement.options[0] = new Option('22044', '22044');
		}
		else if(cityElement.value === 'Springfield')
		{
			zipElement.options[0] = new Option('22015', '22015');
			zipElement.options[1] = new Option('22150', '22150');
			zipElement.options[2] = new Option('22151', '22151');
			zipElement.options[3] = new Option('22152', '22152');
			zipElement.options[4] = new Option('22153', '22153');
		}
		else if(cityElement.value === 'Sully Station')
		{
			zipElement.options[0] = new Option('20120', '20120');
		}
		else if(cityElement.value === 'Tysons Corner')
		{
			zipElement.options[0] = new Option('22102', '22102');
			zipElement.options[1] = new Option('22182', '22182');
		}
		else if(cityElement.value === 'Vienna')
		{
			zipElement.options[0] = new Option('22027', '22027');
			zipElement.options[1] = new Option('22124', '22124');
			zipElement.options[2] = new Option('22180', '22180');
			zipElement.options[3] = new Option('22181', '22181');
			zipElement.options[4] = new Option('22182', '22182');
			zipElement.options[5] = new Option('22183', '22183');
		}
		else if(cityElement.value === 'West McLean')
		{
			zipElement.options[0] = new Option('22102', '22102');
			zipElement.options[1] = new Option('22103', '22103');
		}
		else if(cityElement.value === 'West Springfield')
		{
			zipElement.options[0] = new Option('22152', '22152');
		}
		
		if(elementName === 'city')
			verifyHOHAddress();
		else
			verifyDeliveryAddress();	
	}
	
	function removeOptions(select)
	{
	    for(var i=select.options.length-1;i>=0;i--)
	        select.remove(i);   
	}
	
	function onGiftAssistanceClicked(cb)
	{
		for(var cnum=0; cnum<childrenJson.length; cnum++)
		{
			for(var wn=0; wn<4; wn++)
			{
				var wishElement = document.getElementById('wish' + cnum + wn);
				wishElement.value = '';
				wishElement.disabled = !cb.checked;
			}	
		}
	}
	
	function mealRqrdClicked(cb)
	{
		var mealCombo = document.getElementById('mealtype');
		var dietres = document.getElementById('dietres');
		//clear the meal type combobox
    	mealCombo.options.length = 0;
		
		if(cb.checked == false)
		{
			var choices = ["No Assistance Rqrd"];
			mealCombo.disabled = true;
			dietres.value="";
			dietres.disabled = true;
		}
		else if(sessionStorage.getItem('thanksgivingCutoff') === 'disabled')
		{
			var choices = ["December"];
			mealCombo.disabled = false;
			dietres.disabled = false;
		}
		else
		{
			var choices = ["Thanksgiving", "December"];
			mealCombo.disabled = false;
			dietres.disabled = false;	
		}
		
		//add the meal choices
		for (var i=0; i < choices.length; i++)
		{
			var mealOption = document.createElement("option");
			mealOption.text = choices[i];
	    	mealOption.value = choices[i];
	    	try 
	    	{
	        	mealCombo.add(mealOption, null); //Standard 
	    	}
	    	catch(error)
	    	{
	        	mealCombo.add(mealOption); // IE only
	    	}  
		}   	
	}

	function verifyHOHAddress()
	{
		//called when HOH address inputs blur
		var addrElement = [document.getElementById('housenum'), 
		                   document.getElementById('street'),
		                   document.getElementById('unit'),
		                   document.getElementById('city'), 
		                   document.getElementById('zipcode')];
		
		var unitElement = [document.getElementById('unit')];
		
		//check to see that housenum and street are not blank
		if(addrElement[0].value !== "" && addrElement[1].value !== "" )
		{
			//form the address url
	        var addressparams = createAddressParams(addrElement);
	        var addrresponse;
	        $.getJSON('address', addressparams, function(data)
	      	{
	      		addresponse = data;
	      		
	      		if(addresponse.hasOwnProperty('error'))
	      		{
					window.location=document.getElementById('timeoutanchor').href;
	      		}
	      		else if(addresponse.errorCode === 0)
	      		{
	      			changeAddressBackground(addrElement, '#FFFFFF');
	      			hohAddressGood = true;
	      		}	
	      		else if(addresponse.errorCode === 1 || addresponse.errorCode === 3)
	      		{
	      			hohAddressGood = false;
	      			changeAddressBackground(addrElement, errorColor);
	      		}
	      		else if(addresponse.errorCode === 2)
	      		{
	      			hohAddressGood = false;
	      			changeAddressBackground(addrElement, '#FFFFFF');
	      			changeAddressBackground(unitElement, errorColor);
	      		}
	      	});
		}
		else
			hohAddressGood = false;
	}
	
	function verifyDeliveryAddress()
	{
		//called when delivery address inputs change
		if(bVerifyDeliveryAddressEnabled)
		{
			var addrElement = [document.getElementById('delhousenum'),
		    	               document.getElementById('delstreet'),
		        	           document.getElementById('delunit'),
		            	       document.getElementById('delcity'), 
		                	   document.getElementById('delzipcode')];
		
			var unitElement = [document.getElementById('delunit')];
		
			//check to see that housenum and street are provided
			if(addrElement[0].value !== "" && addrElement[1].value !== "" )
			{
				//form the address url
	        	var addressparams = createAddressParams(addrElement);
	        	var addrresponse;
	        	$.getJSON('address',  addressparams, function(data)
	      		{
	      			addresponse = data;
	      		
	      			if(addresponse.hasOwnProperty('error'))
	      			{
						window.location=document.getElementById('timeoutanchor').href;
	      			}
	      			else if(addresponse.errorCode === 0)
	      			{
	      				changeAddressBackground(addrElement, '#FFFFFF');
	      				delAddressGood = true;
	      			}	
	      			else if(addresponse.errorCode === 1 || addresponse.errorCode === 3)
	      			{
	      				delAddressGood = false;
	      				changeAddressBackground(addrElement, errorColor);
	      			}
	      			else if(addresponse.errorCode === 2)
	      			{
	      				delAddressGood = false;
	      				changeAddressBackground(addrElement, '#FFFFFF');
	      				changeAddressBackground(unitElement, errorColor);
	      			}
	      		});
			}
			else
				delAddressGood = false;
		}
	}
	
	function onZipChanged(zipelement)
	{
		if(zipelement === 'zipcode')
			verifyHOHAddress();
		else
			verifyDeliveryAddress();
	}
	
	function changeAddressBackground(elements, color)
	{
		for(var i=0; i< elements.length; i++)
			elements[i].style.backgroundColor = color;
	}
	
	function createAddressParams(addrElement)
	{	
		var addressparams = "token=" + sessionStorage.getItem("token") + "&" +
							"prioryear=" + sessionStorage.getItem("prioryear") + "&" +
							"housenum=" + encodeURIComponent(addrElement[0].value) + "&" +
							"street=" + encodeURIComponent(addrElement[1].value) + "&" +
							"unit=" + encodeURIComponent(addrElement[2].value) + "&" +
							"city=" + addrElement[3].value + "&" +
							"zipcode=" + addrElement[4].value + "&" +
							"callback=?";
		
		return addressparams;
	}
	
	function verifyPhoneNumbers()
	{
		var errorMssg= "";
		var phoneName= ["Primary", "Alternate", "2nd Alternate"];

		var index=0;
		while(index<phoneName.length && verifyPhoneNumber(index))
			index++;
			
		if(index < phoneName.length)	
			errorMssg= "Submission Error: " + phoneName[index] + " Phone # is invalid";	
		
		return errorMssg;	
	}
	function verifyPhoneNumber(elementNum)
	{
		var phoneElement= [document.getElementById('homephone'), 
							document.getElementById('cellphone'),
							document.getElementById('altphone')];
		
		var numberGood = true;
		var number= phoneElement[elementNum].value;
		
		if(number == '')
			phoneElement[elementNum].style.backgroundColor = '#FFFFFF';
		else if(number.length===12 && number.charAt(3)==='-' && number.charAt(7)==='-')
			phoneElement[elementNum].style.backgroundColor = '#FFFFFF';
		else if(number.length===12 && number.charAt(3)==='.' && number.charAt(7)==='.')
			phoneElement[elementNum].style.backgroundColor = '#FFFFFF';
		else if(number.length===10 && number.indexOf("-")===-1 && number.indexOf(".")===-1)
			phoneElement[elementNum].style.backgroundColor = '#FFFFFF';
		else
		{
			numberGood= false;
			phoneElement[elementNum].style.backgroundColor = errorColor;
		}
		
		return numberGood;
	}
	
	function onSessionTimeout()
	{
		 window.location.assign('timeout');
	}
	
	function submitReferral()
	{
		var phoneNumbersGood= true;
		var errorElement = document.getElementById('errormessage');
 
		if(hohAddressGood===false)
			errorElement.textContent = "Submission Error: HoH address incomplete or does not exist";
		else if(delAddressGood===false)
			errorElement.textContent = "Submission Error: Delivery address incomplete or does not exist";
		else
		{	
			//check phone numbers
			var phoneMssg= verifyPhoneNumbers();
			if(phoneMssg != '')
			{
				phoneNumbersGood=false;
				errorElement.textContent=phoneMssg;
			}
		}
		
	    return hohAddressGood && delAddressGood && phoneNumbersGood;
	}
  </script>
  <style>
	.ui-datepicker
	{
		width:480px;
  		background-color: lightskyblue;
  		font-size:13px;
	}
	.ui-datepicker-calendar .ui-state-active  { background: #fff000; }
	.ui-datepicker thead { background-color: #f7f7f7; }
	#submitspan {float: right;}
	#errormessage
	{
		float: left;
		font-weight: bold;
		font-style: italic;
		color: red;
	}
	table, th, td {border: 1px solid black;}
	th, td {min-width: 60px; }
  </style>
</head>
<body>
  <a href="#timeoutdlg" id="timeoutanchor" style="visibility: hidden">Timeout</a>
  <div id="topbar" class="topbar">
    <img src="onclogo" height="55" width="75"/>
    <p><span id="banner">ONC Family Assistance Referral Form</span><br>
	<span id="message">(please complete and click Submit To ONC)</span></p>
  </div>
  <nav>
    <ul>
	    <li id="homeli"><a id='homelink'>Home</a></li>
	</ul>
	<ul class='floatright'>
	    <li id="logoutli"><a id='logoutlink'>Logout</a></li>
	</ul>
  </nav>
  <form id="familyreferral" action="referfamily" onsubmit="return submitReferral()" method="post">
  <input id='token' type="hidden" name="token">
  <input id='year' type="hidden" name="year">
  <input id='targetid' type="hidden" name="targetid">
  <br>
  <fieldset>
  <legend class="legend-major">Head of Household (HOH) Information</legend>
    <input id='hohfn' title="First Name" name="hohFN" type="text" size="20" placeholder="First Name" required>
    <input id='hohln' title="Last Name" name="hohLN" type="text" size="20" placeholder="Last Name" required>
    <input id="homephone" title="Home Phone #" name="homephone" type="text" size="18" placeholder="Primary Phone #" onchange="verifyPhoneNumber(0)" required>
    <input id= "cellphone" title="Cell Phone #" name="cellphone" type="text" size="18" placeholder="Alternate Phone #" onchange="verifyPhoneNumber(1)">
    <input id= "altphone" title="Alternate Phone #" name="altphone" type="text" size="18" placeholder="2nd Alt Phone #" onchange="verifyPhoneNumber(2)">
  	<select title="Primary language" name="language">
		<option value="English">English</option>
		<option value="Spanish">Spanish</option>
		<option value="Arabic">Arabic</option>
		<option value="Korean">Korean</option>
		<option value="Vietnamese">Vietnamese</option>
		<option value="Other">Other</option>
		<option value="?">Unknown</option>
	</select>
	<br>
	<input id="housenum" title="House #" name="housenum" type="text" size="8" placeholder="House #" onchange="verifyHOHAddress()" autocomplete="off" required>
    <input id="street" title="Street Name" name="street" type="text" size="20" placeholder="Street Name" onchange="verifyHOHAddress()" autocomplete="off" required>
    <input id="unit" title="Apt. or Unit #" name="unit" type="text" size="8" placeholder="Apt #" onchange="verifyHOHAddress()" autocomplete="off">
    <select id="city" title="City" name="city" onchange="cityChanged('city')">
    	<option value="Centreville">Centreville</option>
		<option value="Chantilly">Chantilly</option>
		<option value="Clifton">Clifton</option>
		<option value="Fairfax">Fairfax</option>
		<option value="Fairfax Station">Fairfax Station</option>
		<option value="Sully Station">Sully Station</option>
		<option value="Alexandria">Alexandria</option>
		<option value="Annandale">Annandale</option>
		<option value="Arlington">Arlington</option>
		<option value="Baileys Crossroads">Baileys Crossroads</option>
		<option value="Belleview">Belleview</option>
		<option value="Burke">Burke</option>
		<option value="Cameron Station">Cameron Station</option>
		<option value="Dunn Loring">Dunn Loring</option>
		<option value="Engleside">Engleside</option>
		<option value="Falls Church">Falls Church</option>
		<option value="Fort Belvoir">Fort Belvoir</option>
		<option value="Franconia">Franconia</option>
		<option value="Great Falls">Great Falls</option>
		<option value="Greenway">Greenway</option>
		<option value="Herndon">Herndon</option>
		<option value="Jefferson Manor">Jefferson Manor</option>
		<option value="Kingstowne">Kingstowne</option>
		<option value="Lorton">Lorton</option>
		<option value="Mason Neck">Mason Neck</option>
		<option value="McLean">McLean</option>
		<option value="Merrifield">Merrifield</option>
		<option value="Mosby">Mosby</option>
		<option value="Mount Vernon">Mount Vernon</option>
		<option value="Newington">Newington</option>
		<option value="North Springfield">North Springfield</option>
		<option value="Oak Hill">Oak Hill</option>
		<option value="Oakton">Oakton</option>
		<option value="Pimmit">Pimmit</option>
		<option value="Reston">Reston</option>
		<option value="Seven Corners">Seven Corners</option>
		<option value="Springfield">Springfield</option>
		<option value="Tysons Corner">Tysons Corner</option>
		<option value="Vienna">Vienna</option>
		<option value="West McLean">West McLean</option>
		<option value="West Springfield">West Springfield</option>
	</select>
    <select id="zipcode" title="Zip Code" name="zipcode" onchange="onZipChanged('zipcode')">
		<option value="20120">20120</option>
		<option value="20121">20121</option>
		<option value="20122">20122</option>
	</select>
	<input title="E-mail address" name="email" type="email" size="30" placeholder="email address">
  </fieldset>
  <br>
  <fieldset>
  <legend class="legend-major">Delivery Address & Transportation: Provide address that ONC will use for gift delivery & family's access to transportation</legend>
	<input type="checkbox" id="sameaddress" title="Uncheck to edit HoH or Delivery address" onclick="sameAddressClicked(this)">Check if same as HOH address above, otherwise complete:
	<input id="delhousenum" title="Delivery House #" name="delhousenum" type="text" size="8" placeholder="House #" onchange="verifyDeliveryAddress()" autocomplete="off" required>
    <input id="delstreet" title="Delivery Street Name" name="delstreet" type="text" size="20" placeholder="Street Name" onchange="verifyDeliveryAddress()" autocomplete="off" required>
    <input id="delunit" title="Deleivery Apt. or Unit #" name="delunit" type="text" size="8" placeholder="Apt #" onchange="verifyDeliveryAddress()" autocomplete="off">
    <select id="delcity" title="Delivery City" name="delcity" onchange="cityChanged('delcity')">
    	<option value="Centreville">Centreville</option>
		<option value="Chantilly">Chantilly</option>
		<option value="Clifton">Clifton</option>
		<option value="Fairfax">Fairfax</option>
		<option value="Fairfax Station">Fairfax Station</option>
		<option value="Sully Station">Sully Station</option>
		<option value="Alexandria">Alexandria</option>
		<option value="Annandale">Annandale</option>
		<option value="Arlington">Arlington</option>
		<option value="Baileys Crossroads">Baileys Crossroads</option>
		<option value="Belleview">Belleview</option>
		<option value="Burke">Burke</option>
		<option value="Cameron Station">Cameron Station</option>
		<option value="Dunn Loring">Dunn Loring</option>
		<option value="Engleside">Engleside</option>
		<option value="Falls Church">Falls Church</option>
		<option value="Fort Belvoir">Fort Belvoir</option>
		<option value="Franconia">Franconia</option>
		<option value="Great Falls">Great Falls</option>
		<option value="Greenway">Greenway</option>
		<option value="Herndon">Herndon</option>
		<option value="Jefferson Manor">Jefferson Manor</option>
		<option value="Kingstowne">Kingstowne</option>
		<option value="Lorton">Lorton</option>
		<option value="Mason Neck">Mason Neck</option>
		<option value="McLean">McLean</option>
		<option value="Merrifield">Merrifield</option>
		<option value="Mosby">Mosby</option>
		<option value="Mount Vernon">Mount Vernon</option>
		<option value="Newington">Newington</option>
		<option value="North Springfield">North Springfield</option>
		<option value="Oak Hill">Oak Hill</option>
		<option value="Oakton">Oakton</option>
		<option value="Pimmit">Pimmit</option>
		<option value="Reston">Reston</option>
		<option value="Seven Corners">Seven Corners</option>
		<option value="Springfield">Springfield</option>
		<option value="Tysons Corner">Tysons Corner</option>
		<option value="Vienna">Vienna</option>
		<option value="West McLean">West McLean</option>
		<option value="West Springfield">West Springfield</option>
	</select>	
    <select id="delzipcode" title="Deleivery Zip Code" name="delzipcode" onchange="onZipChanged('delzipcode')">
		<option value="20120">20120</option>
		<option value="20121">20121</option>
		<option value="20122">20122</option>
	</select>
  <br><br>
  <label>Does the family have their own transportation? </label>
  <input id="transYes" type="radio" name="transportation" value="Yes">Yes
  <input id="transNo" type="radio" name="transportation" value="No" checked>No
  </fieldset>
  <br>
  <fieldset>
  <legend class="legend-major">Family Members</legend>
  <fieldset class="gray">
  	<legend>Children in family (ONC will serve children under 18, or 18+ if they are still enrolled in FCPS. Enter Pre-K for children not yet enrolled)</legend>
  	<input id="childfn" title="First name of child to be added" type="text" size="16" placeholder="First Name">
    <input id="childln" title="Last name of child to be added" type="text" size="16" placeholder="Last Name">
    <input id="childdob" title="Date of birth for child to be added" type="text" size="14" placeholder="DoB">
    <select id="childgender" title="Gender of child to be added">
		<option value="Boy">Boy</option>
		<option value="Girl">Girl</option>
		<option value="Unknown">Unknown</option>
	</select>
	<input id="childschool" title="School attended, if none, enter Pre-K" type="text" size="20" placeholder="School">
	<button type="button" onclick="addChild()" title="Click to add child">Add Child</button>
	<button type="button" onclick="clearAddChild()" title="Click to clear add child fields">Clear</button>
  <table id="childtable" border="1">
  	<thead>
    	<tr>
        	<th>First Name</th>
        	<th>Last Name</th>
        	<th>DoB</th>
        	<th>Gender</th>
        	<th>School</th>
        	<th>Action</th>
    	</tr>
      </thead>
      <tbody id="tchildbody">
      </tbody>
  </table>
  </fieldset>
  <br>
  <fieldset>
  	<legend>Other adults in family (in addition to the head of household)</legend>
  	<input id="adultname" title="Name" type="text" size="28" placeholder="First & Last Name">
    <select id="adultgender" title="Gender">
		<option value="Male">Male</option>
		<option value="Female">Female</option>
		<option value="Unknown">Unknown</option>
	</select>
	<button type="button" onclick="addAdult()" title="Click to add adult to family">Add Adult</button>
	<button type="button" onclick="clearAddAdult()" title="Click to clear adult fields">Clear</button>
  <table id="adulttable" border="1">
  	<thead>
    	<tr>
        	<th>Name</th>
        	<th>Gender</th>
        	<th>Action</th>
    	</tr>
    </thead>
    <tbody id="tadultbody">
    </tbody>
</table>
  </fieldset>
  </fieldset>
  <br>
  <fieldset>
   <legend class="legend-major">Gift Assistance: Check if family requests gifts and provide 3 wishes per child, in priority order, plus an alternate wish. If clothing or footwear, please include size</legend>
     <input type="checkbox" name='giftreq' onclick='onGiftAssistanceClicked(this)' title="Check if family wants gift assistance">Check to request gift assistance and complete below:
  	 <table id="wishtable" border="1">
  	<thead>
    	<tr>
        	<th>First Name</th>
        	<th>Age/Gender</th>
        	<th>Wish 1</th>
        	<th>Wish 2</th>
        	<th>Wish 3</th>
        	<th>Alternate Wish</th>	
    	</tr>
      </thead>
      <tbody id="twishbody">
      </tbody>
  </table>
  </fieldset>
  <br>
  <fieldset>
  <legend class="legend-major">Meal Assistance: ONC will refer family to WFCM or other meal providing organizations</legend>
	<input type="checkbox" onclick="mealRqrdClicked(this)" title="Check if family needs meal assistance">Check to request meal assistance for:
    <select id="mealtype" name="mealtype" title="When does the family need meal assistance?" disabled>
		<option value="No Assistance Rqrd">No Assistance Rqrd</option>
	</select>
	<input id="dietres" type="text" name="dietres" size="68" placeholder="Describe any dietary restrictions" title="Describe any family dietary restrictions" disabled>
  </fieldset>
  <br>
  <fieldset>
   <legend class="legend-major">Family Details: Provide any additional details that may assist in serving this family</legend>
	<input type="text" name="detail" size="128" placeholder="Details about family ONC should know" title="Provide ONC with information about the family you feel is important">
  </fieldset>
  <br>
  <div>
  	<span id="errormessage"></span>
  	<span id="submitspan">
  	  <label for="submit">Please check that all fields are complete prior to submission: </label>
  	  <input id="submit" type="submit" value="Submit to ONC" style="background-color: #336699; color: #ffffff;" title="Click to sumbit family to ONC">
  	</span>
  </div>
</form>
<!-- Timeout Dialog -->
  <div id="timeoutdlg" class="modalDialog">
	<div id='inner'>
		<div id='dialogtopbar'>
		  <img src="onclogo" height="45" width="65"/>
		  <span id='dialogmssg'>Session Timeout</span>
		</div>
		<p id='to_mssg'>Your session expired due to inactivity</p>
    	<div id='buttonbar'>
      	  <button id="submit" onclick="onSessionTimeout()">Logout</button>
    	</div> 
	</div>
  </div>    
</body>
</html>   