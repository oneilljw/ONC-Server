 <!DOCTYPE html>
<html>
<head lang="en">
  <title>ONC Family Referral</title>
  <link rel="stylesheet" type="text/css" href="oncstylesheet.css">
  <script src="https://code.jquery.com/jquery-1.9.1.min.js"></script>
  <script>
	var currYear;
	var priorYear;
	var pyFamJson = [];
	var cyFamJson = [];
	
	sessionStorage.setItem('token', "REPLACE_TOKEN");
	sessionStorage.setItem('thanksgivingCutoff', "THANKSGIVING_CUTOFF");
	sessionStorage.setItem('decemberCutoff', "DECEMBER_CUTOFF");
	sessionStorage.setItem('editCutoff', "EDIT_CUTOFF");
	sessionStorage.setItem('homelinkVisibility', "HOME_LINK_VISIBILITY");
	
    $( document ).ready(function()
    {
    	//update the nav bar links with token and set home link presence
    	if(sessionStorage.getItem('homelinkVisibility') === 'visible')
    	{
    		document.getElementById('homelink').href="startpage?token=" + sessionStorage.getItem('token')
    				+'&year=' + sessionStorage.getItem('curryear')
    				+'&famref=' + sessionStorage.getItem('famref');
    		
    		var clientserviceli = document.getElementById('clientserviceli');
    		clientserviceli.parentNode.removeChild(clientserviceli);
    	}
    	else
    	{
    		var homelinkli = document.getElementById('homelinkli');
    		homelinkli.parentNode.removeChild(homelinkli);
    	}
 
  		document.getElementById('logoutlink').href="logout?token=" + sessionStorage.getItem('token'); 
//  	document.getElementById('editprofilelink').href="editprofile?token=" + sessionStorage.getItem('token');
  		
    	currYear = new Date().getFullYear();
		document.getElementById('curragtenslbl').innerHTML = currYear.toString() + ' Families Referred By:';
		
		priorYear = new Date().getFullYear()-1;
		sessionStorage.setItem("prioryear", priorYear);
		
    	//get the list of years from the data base and put it in the year combo box
    	var dbyearsparams = "token=" + sessionStorage.getItem("token") + "&callback=?";
    	$.getJSON('dbStatus', dbyearsparams, function(data)
    	{
			var combo = document.getElementById("dbYears");
			var yearCombo = document.getElementById("yearlist");
    		for (var i = data.length-1; i >= 0; i--)
    		{
    			var option = document.createElement("option");
    			option.text = data[i].id;
    	    	option.value = data[i].id;
    	    	if(option.value != currYear)	//dont add current year to year selections
    	    	{
    	    		try 
    	    		{
    	        		combo.add(option, null); //Standard 
    	    		} 
    	    		catch(error) 
    	    		{
    	        		combo.add(option); // IE only
    	    		}
    	    	}
    		}
    	});
    	
    	//determine the color and enabling of the Refer New Family button
		var btnRNF = document.getElementById('new');
		if(sessionStorage.getItem('decemberCutoff') === 'disabled')
		{
			btnRNF.style.backgroundColor='Gray';
        	btnRNF.disabled = true;
		}
    	
    	//get the list of current year agents & familes from the server and display them
    	//this also gets prior year families and displays them
    	getCYAgentsAndFamiliesFromServer(currYear.toString());
    	
    	// Write on keyup event of keyword prior year seach input element
        $("#pysearch").keyup(function(){
            _this = this;
            // Show only matching TR, hide rest of them
            $.each($("#pyTable tbody tr"), function() {
                if($(this).text().toLowerCase().indexOf($(_this).val().toLowerCase()) === -1)
                   $(this).hide();
                else
                   $(this).show();                
            });
        });
    	
     // Write on keyup event of keyword current year seach input element
        $("#cysearch").keyup(function(){
            _this = this;
            // Show only matching TR, hide rest of them
            $.each($("#cyTable tbody tr"), function() {
                if($(this).find('td').eq(2).text().toLowerCase().indexOf($(_this).val().toLowerCase()) === -1)
                   $(this).hide();
                else
                   $(this).show();                
            });
        }); 
    });
    
    function getPYFamiliesFromServer(year)
    {
    	familiesparams = "token=" + sessionStorage.getItem("token") + "&" +
    					 "year=" + sessionStorage.getItem("prioryear") + "&callback=?";
    	$.getJSON('families', familiesparams, function(data)
    	{
    		pyFamJson = data;
    		updatePYTable();
    	});
    }
    
    function getCYFamiliesFromServer(year)
    {
    	familiesparams = "token=" + sessionStorage.getItem("token") + "&" +
		  				 "year=" + currYear.toString() + "&callback=?";
    	$.getJSON('families', familiesparams, function(data)
    	{
    		cyFamJson = data;
    		updateCYTable();
    	});
    }
    
    function getPYAgentsAndFamiliesFromServer(year)
    {
    	//get reference to agent combobox
    	var agtcb = document.getElementById('pyagents');
    	
    	//clear the agent combobox
    	agtcb.options.length = 0;
		
    	//get updated agentJson from server and place into combobox
    	var agentsparams = "token=" + sessionStorage.getItem("token") + "&" +
    						"year=" + sessionStorage.getItem("prioryear") + "&callback=?";
    	
    	$.getJSON('agents', agentsparams, function(data)
    	{
			//add the "Anyone" option if there is more than one agent object
			if(data.length > 1)
			{
				var agtOption = document.createElement("option");
				agtOption.text = "Anyone";
	    		agtOption.value = -1;
	    		try 
	    		{
	        		agtcb.add(agtOption, null); //Standard 
	    		} 
	    		catch(error) 
	    		{
	        		agtcb.add(agtOption); // IE only
	    		}
			}
	    	
	    	//add the agents for the year
    		for (var i=0; i < data.length; i++)
    		{
    			var agtOption = document.createElement("option");
    			agtOption.text = data[i].name;
    	    	agtOption.value = data[i].id;
    	    	try 
    	    	{
    	        	agtcb.add(agtOption, null); //Standard 
    	    	}
    	    	catch(error)
    	    	{
    	        	agtcb.add(agtOption); // IE only
    	    	}  
    		}
	    	
	    	getPYFamiliesFromServer(year);
    	});
    }
    
    function getCYAgentsAndFamiliesFromServer(year)
    {
    	//get reference to agent combobox
    	var agtcb = document.getElementById('curragents');
    	
    	//clear the agent combobox
    	agtcb.options.length = 0;
		
    	//get updated agentJson from server and place into combobox
    	var agentsparams = "token=" + sessionStorage.getItem("token") + "&" +
    						"year=" + currYear.toString() + "&callback=?";
    	
    	$.getJSON('agents', agentsparams, function(data)
    	{
			//add the "Anyone" option if there is more than one agent object
			if(data.length > 1)
			{
				var agtOption = document.createElement("option");
				agtOption.text = "Anyone";
	    		agtOption.value = -1;
	    		try 
	    		{
	        		agtcb.add(agtOption, null); //Standard 
	    		} 
	    		catch(error) 
	    		{
	        		agtcb.add(agtOption); // IE only
	    		}
			}
	    	
	    	//add the agents for the year
    		for (var i=0; i < data.length; i++)
    		{
    			var agtOption = document.createElement("option");
    			agtOption.text = data[i].name;
    	    	agtOption.value = data[i].id;
    	    	try 
    	    	{
    	        	agtcb.add(agtOption, null); //Standard 
    	    	}
    	    	catch(error)
    	    	{
    	        	agtcb.add(agtOption); // IE only
    	    	}  
    		}
	    	
    		getCYFamiliesFromServer(year);
    		
    		//get the list of prior year agents & families from the server and display them
        	getPYAgentsAndFamiliesFromServer(priorYear.toString());
    	});
    }
    
    function updateForYearSelection()
    {
    	//get selected year
    	var yearCB = document.getElementById("dbYears");
		priorYear = yearCB.options[yearCB.selectedIndex].value;
		sessionStorage.setItem("prioryear", priorYear);
    	
    	getPYAgentsAndFamiliesFromServer(priorYear);	//get agents & families from server
    }
    
    function updatePYTable()
    {
    	$("#pytbody").empty();
    	var e = document.getElementById("pyagents");
    	var agentID = e.options[e.selectedIndex].value;
    	
    	for(var i=0; i<pyFamJson.length; i++)
		{
    		if(agentID == -1 || agentID == pyFamJson[i].agentID)
    		{
    			addTableRow(pyFamJson[i], document.getElementById('pyTable'), "Refer");	//add row to table
    		}
		}
    	
    	//clear the search box
    	var searchbox = document.getElementById('pysearch');
    	searchbox.value = "";
    }
    
    function updateCYTable()
    {
    	$("#cytbody").empty();
    	var e = document.getElementById("curragents");
    	var agentID = e.options[e.selectedIndex].value;
    	
    	for(var i=0; i<cyFamJson.length; i++)
		{
    		if(agentID == -1 || agentID == cyFamJson[i].agentID)
    		{
    			addTableRow(cyFamJson[i], cyTable, "Edit");	//add row to table
    		}
		}
    	
    	//clear the search box
    	var searchbox = document.getElementById('cysearch');
    	searchbox.value = "";
    }

    function addTableRow(family, table, buttontext)
    {
        if (!document.getElementsByTagName) return;
        
        var fstatus;
        if(family.fstatus === 'Packaged')
        	fstatus = 'Packaged \u2713';
        else
        	fstatus = family.fstatus;
        
        var dstatus;
        if(family.dstatus === 'Delivered')
        	dstatus = 'Delivered \u2713';
        else if(family.dstatus === 'Empty')
        	dstatus = 'None';
        else
        	dstatus = family.dstatus;
        
        var mealstatus;
        if(family.mealStatus === 'Thanksgiving_Confirmed')
        	mealstatus = 'Thanksgiving \u2713';
        else if(family.mealStatus === 'December_Confirmed')
        	mealstatus = 'December \u2713';
        else if(family.mealStatus === 'Both_Confirmed')
        	mealstatus = 'Both \u2713';
        else
        	mealstatus = family.mealStatus;
        	
        var familyinfo = [family.oncNum, family.HOHFirstName, family.HOHLastName, family.DNSCode,
      					  fstatus, dstatus, mealstatus];
        
        var cellwidth = ['54px', '170px', '170px', '86px', '136px', '136px', '136px', '54px'];
        
	    var tabBody = table.getElementsByTagName('tbody').item(0);
        row=document.createElement("tr");
         
        for(index=0; index < familyinfo.length; index++)	//create the family info cells
        {
        	cell = document.createElement("td");
        	cell.appendChild(document.createTextNode(familyinfo[index]));
        	cell.style.width = cellwidth[index];
        	row.appendChild(cell);
        }
        
        btn = document.createElement("button");
        btn.innerHTML = buttontext;
        btn.style.width = cellwidth[index];
        btn.onclick=function() {familyAction(table, family.targetID);};
        
		setButtonStatus(family, table, btn);
        row.appendChild(btn);
        
        tabBody.appendChild(row);
    }
    
    function setButtonStatus(family, table, btn)
    {
    	if(table=== document.getElementById('pyTable'))
    	{
    		if(alreadyReferred(family.targetID) === true)
            {
            	btn.style.backgroundColor='Red';
            	btn.disabled = true;
            }
            else if(sessionStorage.getItem('decemberCutoff') === 'disabled')
            {
            	btn.style.backgroundColor='Gray';
            	btn.disabled = true;
            }
    	}
    	else if(sessionStorage.getItem('editCutoff') === 'disabled')
        {
            btn.style.backgroundColor='Gray';
            btn.disabled = true;
    	}
    }

    function familyAction(table, targetID)
    {
    	sessionStorage.setItem("targetid", targetID);
		var params = {}
		
		params["token"] = sessionStorage.getItem('token');
		params["targetid"] = targetID;
		
		if(table=== document.getElementById('pyTable'))
		{
			params["year"] = priorYear.toString();
			post('referral', params);
		}
		else
		{
			params["year"] = currYear.toString();
			post('familyupdate', params);
		}
    }
    
    function newFamily()
    {
    	sessionStorage.setItem("targetid", "NNA");
		sessionStorage.setItem("prioryear", new Date().getFullYear()-1);
    	
    	var params = {}
		params["token"] = sessionStorage.getItem('token');
		
		post('newfamily', params);
    }
    
    function alreadyReferred(targetID)
    {
    	var index = 0;
    	while(index < cyFamJson.length && cyFamJson[index].targetID != targetID)
    	    index++;
    	
    	if(index < cyFamJson.length)
    		return true;
    	else
    	    return false;
    }
    
	function post(path, params, method) 
	{
	    method = method || "post"; // Set method to post by default if not specified.

	    // The rest of this code assumes you are not using a library.
	    // It can be made less wordy if you use one.
	    var form = document.createElement("form");
	    form.setAttribute("method", method);
	    form.setAttribute("action", path);

	    for(var key in params) 
	    {
	    	if(params.hasOwnProperty(key))
	        {
	            var hiddenField = document.createElement("input");
	            hiddenField.setAttribute("type", "hidden");
	            hiddenField.setAttribute("name", key);
	            hiddenField.setAttribute("value", params[key]);

	        	form.appendChild(hiddenField);
	        }
	    }

	    document.body.appendChild(form);
	    form.submit();
	}
    </script>
    <style type="text/css">         
    	.constrainer 
        {
         	width: 90%;
			margin-left: auto;
			margin-right: auto;
            background-color: #3CB371;
            border: 1px solid black;
        }
        .constrainer table { overflow-y: scroll; }
        .constrainer thead { display: table-row; }
        .constrainer tbody
        {
            overflow-x: scroll;
            display: block;
            height: 208px;
        }

        .onccol { width: 54px; }
        .namecol { width: 170px; }
        .dnscol { width: 86px; }
        .statcol { width: 136px; }
        
        /* only styling below here */
        table { border-collapse: collapse; }       
        th, td { border: 1px solid gray; }
        th 
        {
            background-color: lightgrey;
            border-width: 1px;
        }
        td { border-width: 1px; }
        tr:first-child td { border-top-width: 0; }
        tr:nth-child(odd) { background-color: #ffffff; }
        tr:nth-child(even) { background-color: lightgrey; } 
        .controlbar
		{
			width:90%;
			margin:0 auto;
			background-color: #3CB371;
			border: 1px solid black;
		}
		#newbar { text-align: right; }
    </style>
</head>
<body>
  <div id="topbar" class="topbar">
    <img src="onclogo" height="55" width="75"/>
	<p><span id="banner">USER_NAME, welcome to Our Neighbor's Child Family Referral System</span><br>
	<span id="message">USER_MESSAGE</span></p>
  </div>
  <nav>
   <ul>
	    <li id="homelinkli"><a id='homelink'>Home</a></li>
	</ul>
	<ul class='floatright'>
		<li id='clientserviceli'><a href="">Client Service <span class="caret"></span></a>
		  <div>
		    <ul>
			  <li><a id='editprofilelink' href="">Edit My Profile</a></li>
		    </ul>
		  </div>
	    </li>
	    <li id="logoutli"><a id='logoutlink'>Logout</a></li>
	</ul>
  </nav>
  <div class='controlbar'>
		<select id="dbYears" name="dbYear" onchange="updateForYearSelection()" ></select>
		<label for="pyagents">Families Referred By:</label>
		<select id="pyagents"  onchange="updatePYTable()" name="pyagtID"></select>
		<span class='floatright'>
		  <label for="pysearch">Search For:</label>
		  <input type="text" id="pysearch" placeholder="Type to search..." />
		</span>
  </div>
  <div class="constrainer">
	<table id="pyTable">
      <thead>
        <tr>
       		<th class='onccol'>ONC #</th>
       		<th class='namecol'>First Name</th>
       		<th class='namecol'>Last Name</th>
       		<th class='dnscol'>DNS Code</th>
        	<th class='statcol'>Family Status</th>
        	<th class='statcol'>Delivery Status</th>
        	<th class='statcol'>Meal Status</th>
        	<th class='onccol'>Action</th>
        </tr>
      </thead>
      <tbody id='pytbody'>
      </tbody>
	</table>
  </div>
  <div id='newbar' class='controlbar'>
    <button id="new" onclick="newFamily()">Refer New Family</button>
  </div>
  <br><br>
  <div class='controlbar'>
	<label id= curragtenslbl for="curragents">xxxx Families Referred By:</label>
	<select id="curragents"  onchange="updateCYTable()" name="curragtID"></select>
	<span class='floatright'>
	  <label for="cysearch">Search For:</label>
	  <input type="text" id="cysearch" placeholder="Type to search..." />
	</span>
  </div>
  <div class="constrainer">
    <table id= 'cyTable'>
      <thead>
        <tr>
       		<th class='onccol'>ONC #</th>
       		<th class='namecol'>First Name</th>
       		<th class='namecol'>Last Name</th>
       		<th class='dnscol'>DNS Code</th>
        	<th class='statcol'>Family Status</th>
        	<th class='statcol'>Delivery Status</th>
        	<th class='statcol'>Meal Status</th>
        	<th class='onccol'>Action</th>
        </tr>
      </thead>
      <tbody id='cytbody'>
      </tbody>
	</table>
  </div>
</body>
</html>