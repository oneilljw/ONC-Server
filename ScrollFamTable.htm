 <!DOCTYPE html>
<html>
<head lang="en">
  <title>ONC Family Referral</title>
  <link rel="stylesheet" type="text/css" href="oncstylesheet.css">
  <link rel="stylesheet" type="text/css" href="oncdialogstylesheet.css">
  <script src="https://code.jquery.com/jquery-1.9.1.min.js"></script>
  <script>
	var currYear;
	var priorYear;
	var pyFamJson = [];
	var cyFamJson = [];
	
	sessionStorage.setItem('token', "REPLACE_TOKEN");
	sessionStorage.setItem('thanksgivingCutoff', "THANKSGIVING_CUTOFF");
	sessionStorage.setItem('decemberCutoff', "DECEMBER_CUTOFF");
	sessionStorage.setItem('editCutoff', "EDIT_CUTOFF");
	sessionStorage.setItem('homelinkVisibility', "HOME_LINK_VISIBILITY");
	
    $( document ).ready(function()
    {
    		//update the nav bar links with token and set home link presence
    		if(sessionStorage.getItem('homelinkVisibility') === 'visible')
    		{
    			document.getElementById('homelink').href="startpage?token=" + sessionStorage.getItem('token')
    				+'&year=' + sessionStorage.getItem('curryear')
    				+'&famref=' + sessionStorage.getItem('famref');
    		
    			var profileli = document.getElementById('profileli');
    			profileli.parentNode.removeChild(profileli);
    		}
    		else
    		{
    			var homelinkli = document.getElementById('homelinkli');
    			homelinkli.parentNode.removeChild(homelinkli);
    		}
 
  		document.getElementById('logoutlink').href="logout?token=" + sessionStorage.getItem('token'); 
		
   	 	//get the list of years from the data base and put it in the year combo box
    		var dbyearsparams = "token=" + sessionStorage.getItem("token") + "&callback=?";
    		$.getJSON('dbStatus', dbyearsparams, function(data)
    		{	
			currYear = data[data.length-1].id;
			sessionStorage.setItem("curryear", currYear);
    			document.getElementById('curragtenslbl').innerHTML = currYear.toString() + ' Families Referred By:';
    		
    			priorYear = currYear - 1;
    			sessionStorage.setItem("prioryear", priorYear);
    		
			var combo = document.getElementById("dbYears");
			var yearCombo = document.getElementById("yearlist");
    			for (var i = data.length-1; i >= 0; i--)
    				if(data[i].id != currYear)
    					addComboBoxOption(combo, data[i].id, data[i].id);
    		
    			//determine the color and enabling of the Refer New Family button
    			var btnRNF = document.getElementById('new');
    			if(sessionStorage.getItem('decemberCutoff') === 'disabled')
    			{
    				btnRNF.style.backgroundColor='Gray';
    	       		btnRNF.disabled = true;
    			}
    		
    			//get the current year groups, agents & families
    			var groupcb = document.getElementById('currgroups');
    			var agentcb = document.getElementById('curragents');
    			getGroupsAgentsAndFamiliesFromServer(currYear, groupcb, agentcb);
    		
    			//get the prior year groups, agents & families
    			var groupcb = document.getElementById('pygroups');
    			var agentcb = document.getElementById('pyagents');
    			getGroupsAgentsAndFamiliesFromServer(priorYear, groupcb, agentcb);
    		});
    	
    	
    		// Write on keyup event of keyword prior year seach input element
        $("#pysearch").keyup(function(){
            _this = this;
            // Show only matching TR, hide rest of them
            $.each($("#pyTable tbody tr"), function() {
                if($(this).text().toLowerCase().indexOf($(_this).val().toLowerCase()) === -1)
                   $(this).hide();
                else
                   $(this).show();                
            });
        });
    	
     // Write on keyup event of keyword current year seach input element
        $("#cysearch").keyup(function(){
            _this = this;
            // Show only matching TR, hide rest of them
            $.each($("#cyTable tbody tr"), function() {
                if($(this).find('td').eq(2).text().toLowerCase().indexOf($(_this).val().toLowerCase()) === -1)
                   $(this).hide();
                else
                   $(this).show();                
            });
        });
     
        $.getJSON('getstatus', dbyearsparams, function(status)
        {
        		if(status.userstatus === 'Update_Profile')
            {
        			showEditProfileDialog();
        			window.location=document.getElementById('editprofileanchor').href;
            }
    		});
    });
    
    function getGroupsAgentsAndFamiliesFromServer(year, groupcb, agentcb)
    {  	
    		//get updated agentJson from server and place into group combobox. agentid =-1 defaults
    		//to the logged in user
    		var groupparams = "token=" + sessionStorage.getItem("token") + 
    					  "&agentid=-1" +
    					  "&default=on" +
    					  "&callback=?";
    	
    		$.getJSON('groups', groupparams, function(data)
    		{
    			//clear the group combobox
        		groupcb.options.length = 0;
    		
	    		//add the groups for the agent
    			for (var i=0; i < data.length; i++)
    				addComboBoxOption(groupcb, data[i].name, data[i].id);
	    	
    			getAgentsAndFamiliesFromServer(agentcb, year, groupcb.value);
    		});    	
    }
    
    function getAgentsAndFamiliesFromServer(agtcb, year, groupid)
    {
    		//clear the agent combobox
		agtcb.options.length = 0;
	
		//get updated agentJson from server and place into combobox
    		var agentsparams = "token=" + sessionStorage.getItem("token") +
    					   "&year=" + year +
    					   "&groupid=" + groupid +
    					   "&callback=?";
	
		$.getJSON('agents', agentsparams, function(data)
		{
			//add the "Anyone" option if there is more than one agent object
			if(data.hasOwnProperty('error'))
				window.location=document.getElementById('timeoutanchor').href;
			else if(data.length > 1)
				addComboBoxOption(agtcb, "Anyone", -1);
    	
    		//add the agents for the year
			for (var i=0; i < data.length; i++)
				addComboBoxOption(agtcb, data[i].name, data[i].id);
    		
    		//get the families
			getFamiliesFromServer(year, agtcb.value.toString(), groupid);
		});
    }
    
    function getFamiliesFromServer(year, agentid, groupid)
    {
    	familiesparams = "token=" + sessionStorage.getItem("token") +
			 			 "&year=" + year + 
			 			 "&agentid=" + agentid +
			 			 "&groupid=" + groupid + 
			 			 "&callback=?";
    	
    	$.getJSON('families', familiesparams, function(data)
    	{
    		if(year === currYear)
    		{
    			cyFamJson = data;
        		updateCYTable();
    		}
    		else
    		{
    			pyFamJson = data;
    			updatePYTable();
    		}
    	});
    }
    
    function updateGroupsAndFamiliesOnAgentChange(agtcb)
    {
    		if(agtcb === document.getElementById("pyagents"))
    			var groupcb = document.getElementById('pygroups');
    		else
    			var groupcb = document.getElementById('currgroups');
    	
    		if(agtcb.value > -1)
    		{
    			//archive the current group
    			var priorselgroupid = groupcb.value;
    		
    			//get updated groups and families for the agent and year
        		var groupparams = "token=" + sessionStorage.getItem("token") + 
        					  "&agentid=" + agtcb.value +
        					  "&default=on" +
        					  "&callback=?";
        		$.getJSON('groups', groupparams, function(data)
        		{
        			groupcb.options.length = 0;
        		
    	    			//add the groups for the agent
        			for (var i=0; i < data.length; i++)
					addComboBoxOption(groupcb, data[i].name, data[i].id);
    	    	
        			if(agtcb === document.getElementById("pyagents"))
            			getFamiliesFromServer(priorYear, agtcb.value, groupcb.value);
        			else
            			getFamiliesFromServer(currYear, agtcb.value, groupcb.value);
        		
        			//re-select the previously selected group, now in the new group
            		selectCBOptionByValue(groupcb, priorselgroupid);
        		});
    		}
    		else
    		{
    			//agent changed to "anyone" so just get the families, don't change the groups
    			if(agtcb === document.getElementById("pyagents"))
        			getFamiliesFromServer(priorYear, agtcb.value, groupcb.value);
    			else
        			getFamiliesFromServer(currYear, agtcb.value, groupcb.value);
    		}	
    }
    
    function updateAgentsOnGroupChange(groupElement)
    {
    		if(groupElement === document.getElementById('currgroups'))
    		{	
    			var agtcb = document.getElementById('curragents');
    			var agtYear = currYear;
    		}
    		else
    		{
    			var agtcb = document.getElementById('pyagents');
    			var agtYear = sessionStorage.getItem('prioryear');
    		}
    	
    		//archive the current agent and clear the agent combobox
    		var priorselagentID = agtcb.value;
    		agtcb.options.length = 0;
		
    		//get updated agentJson from server and place into combobox
    		var agentsparams = "token=" + sessionStorage.getItem("token") +
    					   "&year=" + agtYear.toString() +
    					   "&groupid=" + groupElement.value +
    					   "&callback=?";
    	
    		$.getJSON('agents', agentsparams, function(data)
    		{
			//add the "Anyone" option if there is more than one agent object
			if(data.length > 1)
				addComboBoxOption(agtcb, "Anyone", -1);

	    		//add the agents for the year
    			for (var i=0; i < data.length; i++)
				addComboBoxOption(agtcb, data[i].name, data[i].id);
	    	
    			//re-select the previously selected agent, now in the new group
    			//get the families for the agent
        		selectCBOptionByValue(agtcb, priorselagentID);
        		getFamiliesFromServer(agtYear, agtcb.value, groupElement.value);
    		});   		
    }
    
	function addComboBoxOption(combobox, text, value)
	{
		var option = document.createElement("option");
		option.text = text;
    		option.value = value;
    		try 
    		{
        		combobox.add(option, null); //Standard 
    		}
    		catch(error)
    		{
        		combobox.add(option); // IE only
    		}
	}
	
    function updateForYearSelection()
    {
    		//get selected year and update session store
    		var yearCB = document.getElementById("dbYears");
		var priorYear = yearCB.options[yearCB.selectedIndex].value;
		sessionStorage.setItem("prioryear", priorYear);
		
		//get the groups, agents & families for the prior year selected
		getGroupsAgentsAndFamiliesFromServer(priorYear, document.getElementById('pygroups'), document.getElementById('pyagents'));
    }
    
    function updatePYTable()
    {
    		$("#pytbody").empty();
    		var e = document.getElementById("pyagents");
    		var agentID = e.value;

    		var count = 0;
    		for(var i=0; i<pyFamJson.length; i++)
		{
    			if(agentID == -1 || agentID == pyFamJson[i].agentID)
    			{
    			addTableRow(pyFamJson[i], document.getElementById('pyTable'), "Refer");	//add row to table
    			count++;
    			}
		}
    	
    		//clear the search box
    		var searchbox = document.getElementById('pysearch');
    		searchbox.value = "";
    	
    		//set the quanity in the table
    		document.getElementById('pyfamilycount').innerHTML = ': ' + count.toString();
    }
    
    function updateCYTable()
    {
    		$("#cytbody").empty();
    		var e = document.getElementById("curragents");
    		var agentID = e.options[e.selectedIndex].value;
    	
    		var count = 0;
    		for(var i=0; i<cyFamJson.length; i++)
		{
    			if(agentID == -1 || agentID == cyFamJson[i].agentID)
    			{
    				addTableRow(cyFamJson[i], cyTable, "Edit");	//add row to table
    				count++;
    			}
		}
    	
    		//clear the search box
    		var searchbox = document.getElementById('cysearch');
    		searchbox.value = "";
    	
    		//set the quanity in the table
    		document.getElementById('cyfamilycount').innerHTML = ': ' + count.toString();
    }    
    
    function selectCBOptionByValue(cbElement, value)
    {
    		var options = cbElement.options;
    	
   		var index = 0;
   		while(index < cbElement.length && options[index].value != value)
    		index++;
    		
    		if(index < cbElement.length)	
    			cbElement.selectedIndex = index;
    		else
    			cbElement.selectedIndex = 0;
    	
   	 	return cbElement.value;
    }
    
    function addTableRow(family, table, buttontext)
    {
        if (!document.getElementsByTagName) return;
        
        var fstatus;
        if(family.fstatus === 'Confirmed')
        		fstatus = 'Confirmed \u2713';
        else
        		fstatus = family.fstatus;
        
        var dstatus;
        if(family.giftStatus === 'Delivered')
        		dstatus = 'Delivered \u2713';
        else if(family.giftStatus === 'Referred')
        		dstatus = 'Referred \u2713';
        else
        		dstatus = family.giftStatus;
        	
        var mealstatus;
        if(family.mealStatus === 'Thanksgiving_Confirmed')
        		mealstatus = 'Thanksgiving \u2713';
        else if(family.mealStatus === 'December_Confirmed')
        		mealstatus = 'December \u2713';
        else if(family.mealStatus === 'Both_Confirmed')
        		mealstatus = 'Both \u2713';
        else if(family.mealStatus === 'None')
        		mealstatus = "Not Requested";
        else if(family.mealStatus === 'Referred')
        		mealstatus = 'Referred \u2713'
        else
        		mealstatus = family.mealStatus;
        	
        var familyinfo = [family.oncNum, family.HOHFirstName, family.HOHLastName, family.DNSCode,
      					  fstatus, dstatus, mealstatus];
        
        var cellwidth = ['54px', '170px', '170px', '86px', '136px', '136px', '136px', '54px'];
        
	    var tabBody = table.getElementsByTagName('tbody').item(0);
        row=document.createElement("tr");
         
        for(index=0; index < familyinfo.length; index++)	//create the family info cells
        {
        		cell = document.createElement("td");
        		cell.appendChild(document.createTextNode(familyinfo[index]));
        		cell.style.width = cellwidth[index];
        		row.appendChild(cell);
        }
        
        btn = document.createElement("button");
        btn.innerHTML = buttontext;
        btn.style.width = cellwidth[index];
        btn.onclick=function() {familyAction(table, family.targetID);};
        
		setButtonStatus(family, table, btn);
        row.appendChild(btn);
        
        tabBody.appendChild(row);
    }
    
    function setButtonStatus(family, table, btn)
    {
    		if(table=== document.getElementById('pyTable'))
    		{
    			if(alreadyReferred(family.targetID) === true)
            {
            		btn.style.backgroundColor='Red';
            		btn.disabled = true;
            }
            else if(sessionStorage.getItem('decemberCutoff') === 'disabled')
            {
            		btn.style.backgroundColor='Gray';
            		btn.disabled = true;
            }
   	 	}
    		else if(sessionStorage.getItem('editCutoff') === 'disabled')
        {
            btn.style.backgroundColor='Gray';
            btn.disabled = true;
   	 	}
    }

    function familyAction(table, targetID)
    {
   	 	sessionStorage.setItem("targetid", targetID);
		var params = {}
		
		params["token"] = sessionStorage.getItem('token');
		params["targetid"] = targetID;
		
		if(table=== document.getElementById('pyTable'))
		{
//			params["year"] = priorYear.toString();
			post('referral', params);
		}
		else
		{
//			params["year"] = currYear.toString();
			post('familyupdate', params);
		}
    }
    
    function newFamily()
    {
    		sessionStorage.setItem("targetid", "NNA");
		sessionStorage.setItem("prioryear", currYear-1);
    	
    		var params = {}
		params["token"] = sessionStorage.getItem('token');
		
		post('newfamily', params);
    }
    
    function alreadyReferred(targetID)
    {
    		var index = 0;
    		while(index < cyFamJson.length && cyFamJson[index].targetID != targetID)
    	    		index++;
    	
    		if(index < cyFamJson.length)
    			return true;
    		else
    	   	 return false;
    }
    
    function showEditProfileDialog() 
    {
    		var params = "token=" + sessionStorage.getItem("token") + "&" + "callback=?";
			
    		$.getJSON('getuser', params, function(user)
    		{
    			userJson = user;
    			if(userJson.hasOwnProperty('error'))
      		{
				window.location=document.getElementById('timeoutanchor').href;
      		}
    			else if(userJson.lastname !== '')
    			{
    				document.getElementById('userfirstname').value = user.firstname;
    	   		 	document.getElementById('userlastname').value = user.lastname;
    	    			document.getElementById('userorg').value = user.org;
    	    			document.getElementById('usertitle').value = user.title;
    	    			document.getElementById('useremail').value = user.email;
    	    			document.getElementById('userphone').value = user.phone;
    			}
   	 	});
    }
    
    function onChangePW() 
    {
    		if(validate())
    		{
			var params = {}	
			params["token"] = sessionStorage.getItem('token');
			params["field1"] = document.getElementById('currpw').value;
			params["field2"] = document.getElementById('newpw').value;
    			$.post('reqchangepw', params, function(response)
    			{
    				document.getElementById('message').textContent= response;
    			});
    		
    			document.getElementById('currpw').value = "";
	    		document.getElementById('newpw').value = "";
	    		document.getElementById('verifypw').value = "";
    			window.location=document.getElementById('closepopup').href;
    		}
    }
    
    function onUpdateProfile()
    {
    		if(document.getElementById('userfirstname').value !== userJson.firstname ||
    			document.getElementById('userlastname').value !== userJson.lastname ||
    		 	document.getElementById('userorg').value !== userJson.org ||
    		  	document.getElementById('usertitle').value !== userJson.title ||
    		   	document.getElementById('useremail').value !== userJson.email ||
    		    document.getElementById('userphone').value !== userJson.phone)
   	 	{
    			var params = "token=" + sessionStorage.getItem("token")
			+ "&" + "firstname=" + document.getElementById('userfirstname').value
			+ "&" + "lastname=" + document.getElementById('userlastname').value
			+ "&" + "org=" + document.getElementById('userorg').value
			+ "&" + "title=" + document.getElementById('usertitle').value
			+ "&" + "email=" + document.getElementById('useremail').value
			+ "&" + "phone=" + document.getElementById('userphone').value
			+ "&" + "callback=?"
		
			$.getJSON('updateuser', params, function(mssgJson)
			{
				document.getElementById('message').textContent= mssgJson.message;
			});
		    		
		    window.location=document.getElementById('closepopup').href;
		}
		else
		{
		    onProfileNotChanged();
		}
    }
    
    function onProfileNotChanged()
    {
		var params = {}	
		params["token"] = sessionStorage.getItem('token');
		$.post('profileunchanged', params, function(response)
		{
			document.getElementById('message').textContent= response.message;
		}, "jsonp");
		
		window.location=document.getElementById('closepopup').href;
    }
    
    function onCancel()
    {
		window.location=document.getElementById('closepopup').href;
    }
	
	function validate()
    {
		var mssgEl = document.getElementById("pw_mssg");
    		var currpwEl = document.getElementById("currpw");
        var pass1El = document.getElementById("newpw");
        var pass2El = document.getElementById("verifypw");
        var ok = true;
        
        if(currpwEl.value == "")
        {
        	//alert("current password field empty");
            currpwEl.style.borderColor = "#E34234";
            
            mssgEl.style.color = "Red";
            mssgEl.textContent = "Current password not provided, please try again!";
            ok = false;
        }
        else if(pass1El.value !== pass2El.value)
        {
            //alert("New and Verify Passwords do not match");
            pass1El.style.borderColor = "#E34234";
            pass2El.style.borderColor = "#E34234";
            
            mssgEl.style.color = "Red";
            mssgEl.textContent = "New and Verify passwords don't match, please try again!";
            ok = false;
        }

        return ok;
    }
	
	function onSessionTimeout()
	{
		 window.location.assign('timeout');
	}
    
	function post(path, params, method) 
	{
	    method = method || "post"; // Set method to post by default if not specified.

	    // The rest of this code assumes you are not using a library.
	    // It can be made less wordy if you use one.
	    var form = document.createElement("form");
	    form.setAttribute("method", method);
	    form.setAttribute("action", path);

	    for(var key in params) 
	    {
	    	if(params.hasOwnProperty(key))
	        {
	            var hiddenField = document.createElement("input");
	            hiddenField.setAttribute("type", "hidden");
	            hiddenField.setAttribute("name", key);
	            hiddenField.setAttribute("value", params[key]);

	        	form.appendChild(hiddenField);
	        }
	    }

	    document.body.appendChild(form);
	    form.submit();
	}
    </script>
    <style type="text/css">         
    	.constrainer 
        {
         	width: 90%;
			margin-left: auto;
			margin-right: auto;
            background-color: #3CB371;
            border: 1px solid black;
        }
        .constrainer table { overflow-y: scroll; }
        .constrainer thead { display: table-row; }
        .constrainer tbody
        {
            overflow-x: scroll;
            display: block;
            height: 208px;
        }

        .onccol { width: 54px; }
        .namecol { width: 170px; }
        .dnscol { width: 86px; }
        .statcol { width: 136px; }
        
        /* only styling below here */
        table { border-collapse: collapse; }       
        th, td { border: 1px solid gray; }
        th 
        {
            background-color: lightgrey;
            border-width: 1px;
        }
        td { border-width: 1px; }
        tr:first-child td { border-top-width: 0; }
        tr:nth-child(odd) { background-color: #ffffff; }
        tr:nth-child(even) { background-color: lightgrey; } 
		#newbar { text-align: right; }
		.textDialog 
		{
			position: fixed;
			font-family: Arial, Helvetica, sans-serif;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
			background: rgba(5,5,5,0.4);
			z-index: 99999;
			opacity:0;
			-webkit-transition: opacity 400ms ease-in;
			-moz-transition: opacity 400ms ease-in;
			transition: opacity 400ms ease-in;
			pointer-events: none;
		}
		.textDialog:target 
		{
			opacity:1;
			pointer-events: auto;
		}
		.textDialog > div 
		{
			width: 700px;
			height: 400px;
			position: relative;
			margin: 10% auto;
			padding: 5px 10px 5px 10px;
			border-radius: 10px;
			background: #fff;
			background: -moz-linear-gradient(#fff, #999);
			background: -webkit-linear-gradient(#fff, #999);
			background: -o-linear-gradient(#fff, #999);
		}
		.textDialog label
		{
			float: left;
    		text-align: right;
    		margin-right: 0.5em;
    		display: block;
    		color: black;
    		font-size: 85%;
		}
		dl
		{	height:300px;
			overflow-y:scroll;
		}
		dt
		{
			font-weight: bold;
		}
		dt:before
		{
			content: '\A';
    		white-space: pre;
		}
		dd
		{
			font-style: italic;
		}
    </style>
</head>
<body>
  <a href="#editProfile" id="editprofileanchor" style="visibility: hidden">Edit Profile</a>
  <a href="#timeoutdlg" id="timeoutanchor" style="visibility: hidden">Timeout</a>
  <div id="topbar" class="topbar">
    <img src="onclogo" height="55" width="75"/>
	<p><span id="banner">USER_NAME, welcome to Our Neighbor's Child's Family Referral System</span><br>
	<span id="message">USER_MESSAGE</span></p>
  </div>
  <nav>
   <ul>
	    <li id="homelinkli"><a id='homelink'>Dashboard</a></li>
	</ul>
	<ul class='floatright'>
		<li id='profileli'><a href="#">Profile <span class="caret"></span></a>
		  <div>
		    <ul>
			  <li><a href="#editProfile" onclick='showEditProfileDialog()'>Edit Profile</a></li>
			  <li><a href="#chgpwdlg">Change Password</a></li>
		    </ul>
		  </div>
	    </li>
	    <li id='hintsli'><a href="#">Helpful Hints <span class="caret"></span></a>
		  <div>
		    <ul>
			  <li><a href="#faqdlg">FAQ's</a></li>
			  <li><a href="#defdlg">Codes/Status Key</a></li>
		    </ul>
		  </div>
	    </li>
	    <li id="logoutli"><a id='logoutlink'>Logout</a></li>
	</ul>
  </nav>
  <div class='controlbar'>
		<select id="dbYears" name="dbYear" onchange="updateForYearSelection()" ></select>
		<label for="pyagents">Families Referred By</label>
		<select id="pyagents"  onchange="updateGroupsAndFamiliesOnAgentChange(this)" name="pyagtID"></select>
		<label id= pygroupslbl for="pygroups">in Group:</label>
		<select id="pygroups" onchange="updateAgentsOnGroupChange(this)" name="pyGroupID"></select>
		<label id="pyfamilycount" for="pygroups"> : 0</label>
		<span class='floatright'>
		  <label for="pysearch">Search For:</label>
		  <input type="text" id="pysearch" placeholder="Type to search..." />
		</span>
  </div>
  <div class="constrainer">
	<table id="pyTable">
      <thead>
        <tr>
       	<th class='onccol'>ONC #</th>
       	<th class='namecol'>First Name</th>
       	<th class='namecol'>Last Name</th>
       	<th class='dnscol'>DNS Code</th>
        	<th class='statcol'>Family Status</th>
        	<th class='statcol'>Gift Status</th>
        	<th class='statcol'>Meal Status</th>
        	<th class='onccol'>Action</th>
        </tr>
      </thead>
      <tbody id='pytbody'>
      </tbody>
	</table>
  </div>
  <div id='newbar' class='controlbar'>
    <button id="new" onclick="newFamily()">Refer New Family</button>
  </div>
  <br><br>
  <div class='controlbar'>
	<label id= curragtenslbl for="curragents">xxxx Families Referred By</label>
	<select id="curragents"  onchange="updateGroupsAndFamiliesOnAgentChange(this)" name="curragtID"></select>
	<label id= currgroupslbl for="currgroups">in Group:</label>
	<select id="currgroups" onchange="updateAgentsOnGroupChange(this)"name="currGroupID"></select>
	<label id="cyfamilycount" for="currgroups"> : 0</label>
	<span class='floatright'>
	  <label for="cysearch">Search For:</label>
	  <input type="text" id="cysearch" placeholder="Type to search..." />
	</span>
  </div>
  <div class="constrainer">
    <table id= 'cyTable'>
      <thead>
        <tr>
       	<th class='onccol'>ONC #</th>
       	<th class='namecol'>First Name</th>
       	<th class='namecol'>Last Name</th>
       	<th class='dnscol'>DNS Code</th>
        	<th class='statcol'>Family Status</th>
        	<th class='statcol'>Gift Status</th>
        	<th class='statcol'>Meal Status</th>
        	<th class='onccol'>Action</th>
        </tr>
      </thead>
      <tbody id='cytbody'>
      </tbody>
	</table>
  </div>
  <!-- Edit Profile Dialog -->
  <div id="editProfile" class="modalDialog">
	<div id='inner'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div id='dialogtopbar'>
		  <img src="onclogo" height="45" width="65"/>
		  <span id='dialogmssg'>Update ONC Profile</span>
		</div>
    	<p><label class='lbl_ep' for="userfirstname">First Name:</label>
    	<input class='inp_ep' type="text" id="userfirstname" name="firstname" autofocus></p>
    	<p><label class='lbl_ep' for="userlastname">Last Name:</label>
    	<input class='inp_ep' type="text" id="userlastname" name="lastname"><br></p>
    	<p><label class='lbl_ep' for="userorg" >Organization:</label>
    	<input class='inp_ep' type="text" id="userorg" name="org"></p>
    	<p><label class='lbl_ep' for="usertitle">Title:</label>
    	<input class='inp_ep' type="text" id="usertitle" name="title"><br></p>
    	<p><label class='lbl_ep' for="useremail">E-Mail:</label>
    	<input class='inp_ep' type="text" id="useremail" name="email"></p>
    	<p><label class='lbl_ep' for="userphone">Phone:</label>
    	<input class='inp_ep' type="text" id="userphone" name="phone"><br></p>
    	<div id='buttonbar'>
      	  <button id="cancel" onclick="onProfileNotChanged()">No Change</button>
      	  <button id="update" onclick="onUpdateProfile()">Update</button>
    	</div> 
	</div>
  </div>
  <!-- FAQ sDialog -->
  <div id="faqdlg" class="textDialog">
	<div id='inner'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div id='dialogtopbar'>
		  <img src="onclogo" height="45" width="65"/>
		  <span id='dialogmssg'>Frequently Asked Questions (scroll to see all):</span>
		</div>
    	<dl>
		  <dt>Q: The name of the family I'm referring isn't listed. Do I select "Refer New Family"?</dt>
		  <dd>A: Any family referred from your school last year should be on the screen. If the 
		  			family name of your referral is not in this list, be sure to use the drop down 
		  			menu at the top left corner of the screen to check for a prior year referral. 
		  			If no prior referral exists, select "Refer New Family".
		  </dd>
	      <dt>Q: We're a Title 1 school with many referrals. Is there an easier way to locate the family name?</dt>
		  <dd>A: Yes. You can enter the family name in the search bar at the top right of the screen.
		  </dd>
		  <dt>Q: Some of the families I submitted are listed as "referred". What does this mean?</dt>
		  <dd>A: We have two organizations in our area who provide holiday assistance, (one food, 
		  		 the other gifts) but to make life a little easier, ONC manages the intake for 
		  		 both.
		  </dd><dd><br>			
				Under Meal Status, "referred" means that this referral has been sent to WFCM 
				(Western Fairfax Christian Ministries). Once that status moves to "Referred", 
				any questions regarding food should be directed to Jennie Bush at WFCM.  
				jbush@wfcmva.org.
		  </dd><dd><br>				
				A Gift Status of "referred" would only apply to Herndon or Fairfax residents 
				just outside our serving area. We coordinate with these other service 
				providers and when appropriate, the referral is sent to that group for service. 
				If you have a GIFT status question about a family marked "referred, please 
				contact Kelly Lavin at ONC, kellylavin@ourneighborschild.org.
		  </dd><dd><br>		
				ONC accepts holiday assistance requests for children in the FCPS School 
				Pyramids of  Centreville, Westfield and Chantilly. A complete listing of 
				schools is on our website.  
		  </dd>
		</dl>
	</div>
  </div>
  <!-- FAQ sDialog -->
  <div id="defdlg" class="textDialog">
	<div id='inner'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div id='dialogtopbar'>
		  <img src="onclogo" height="45" width="65"/>
		  <span id='dialogmssg'>DNS Codes And Status Definitions (scroll to see all):</span>
		</div>
    	<dl>
		  <dt>DNS Codes</dt>
		  <dd>
		    <dl>
		      <dt>DUP - Duplicate Family</dt>
		      <dd>Indicates that more than one referral for this family was received by
		      		ONC. The family will be served through the first referral and the referral
		      		marked DUP will not be processed.
		      </dd>
		      <dt>FO - Food Only</dt>
		      <dd>Referrals marked FO are only requesting holiday food assistance and not requesting
		      		gift assistance. ONC forwards food assistance requests to Western Fairfax Christian
		      		Ministries (WFCM). Contact jbush@wfcmva.org with food assistance questions.
		      </dd>
		      <dt>NISA - Not In Serving Area</dt>
		      <dd>Indicates this family is not located in ONC's serving area.</dd>
		      <dt>OPT-OUT</dt>
		      <dd>Indicates the family requested holiday gift assistance, however, when ONC
		      		contacted the family to confirm delivery, the family withdrew it's
		      		gift assistance request. This may not apply to food assistance.
		      		Contact jbush@wfcmva.org for food assistance information. 
		      </dd>
		       <dt>SA - Salvation Army</dt>
		      <dd>Indicates that the family is being served by the Salvation Army and 
		      		will not be receiving an ONC gift delivery.
		      </dd>
		       <dt>SBO - Served By Other</dt>
		      <dd>Indicates the family is being served by another organization in our area.
		      		See Gift Status - Referred.
		      </dd>			
		    </dl>
		  </dd>
	      <dt>Family Status</dt>
		  <dd>
		    <dl>
		      <dt>Unverified</dt>
		      <dd>Indicates the family referral was received by ONC and is awaiting the 
		      		confirmation process that includes duplication checks and address verifications.
		      </dd>
		      <dt>Verified</dt>
		      <dd>Indicates ONC's initial verification process is complete; the referral has been checked
		      		for duplicaiton and address verifications are complete.
		      </dd>	
		      <dt>Contacted</dt>
		      <dd>Applies to ONC Gift Delivery only: Indicates ONC attempted to contact the family by telephone or email to confirm an
		      		adult would be home between 1pm - 4pm on Sunday, December 17, 2017 to accept gifts.
		      		We were unable to confirm an adult would be home. Referring agents can help
		      		ensure delivery by asking the family to respond to ONC's next attempt to contact them.
		      </dd>
		      <dt>Confirmed &#x2713</dt>
		      <dd>Applies to ONC Gift Delivery only: The family confirmed an adult would be home on
		      		Sunday, December 17, 2017 from from 1pm - 4pm to accept gift delivery.
		      </dd>
		    </dl>
		  </dd>
		  <dt>Gift Status</dt>
		  <dd>
		    <dl>
		      <dt>Not Requested</dt>
		      <dd>Indicates the family referral did not request holiday gift assistance.</dd>
		      <dt>Requested</dt>
		      <dd>Indicates the family referral requested holiday gift assistance.</dd>
		      <dt>Selected</dt>
		      <dd>Indicates gifts have been selected for each eligble member in the family.</dd>
		      <dt>Received</dt>
		      <dd>Indicates gifts have been received for each eligble member from an ONC gift assistance partner.</dd>
		      <dt>Verified</dt>
		      <dd>Indicates gifts have been double-checked for accuracy in preparation for packaging.</dd>
		      <dt>Packaged</dt>
		      <dd>Indicates gifts have been packaged in preparation for delivery.</dd>
		      <dt>Assigned</dt>
		      <dd>Indicates gift delivery has been assigned to a delivery volunteer and delivery is pending.</dd>
		      <dt>Delivered &#x2713</dt>
		      <dd>Indicates gifts have been successfully delivered to the family's delivery address.</dd>
		      <dt>Attempted</dt>
		      <dd>Indicates that our volunteer attempted to deliver the family's gifts, by was unable to complete
		      		the delivery. Additional information is being gathered at this time.
		      </dd>
		      <dt>Returned</dt>
		      <dd>Indicates gifts have been returned to ONC after one or more failed delivery attempts.</dd>
		      <dt>Counselor Pick-Up</dt>
		      <dd>Indicates gifts have been given to the counselor who referred the family. The counselor will arrange
		      		delivery directly with the family.
		      </dd>
		      <dt>Referred &#x2713</dt>
		      <dd>Indicates the family is not in ONC's serving area and a service provider in this family's
		      		area has agreed to accept the referral and serve the family as resources are available.
		      </dd>
		    </dl>
		  </dd>
		  <dt>Meal Status</dt>
		  <dd>
		    <dl>
		      <dt>Not Requested</dt>
		      <dd>Indicates the family referral did not include a request for holiday meal assistance.</dd>
		      <dt>Requested</dt>
		      <dd>Indicates the family referral included a request for holiday meal assistance.</dd>
		      <dt>Assigned</dt>
		      <dd>Indicates ONC has assigned, but not yet referred this request to WFCM or the meal 
		      		assistance provider serving their area.
		      </dd>
		      <dt>Referred &#x2713</dt>
		      <dd>Indicates ONC referred the family's meal assistance request to WFCM or another
		      		provider who will service the meal assistance request.
		      </dd>
		    </dl>
		  </dd>
        </dl>
	</div>
  </div>
<!-- Change Password Dialog -->
  <div id="chgpwdlg" class="modalDialog">
	<div id='inner'>
		<a id='closepopup' href="#close" title="Close" class="close">X</a>
		<div id='dialogtopbar'>
		  <img src="onclogo" height="45" width="65"/>
		  <span id='dialogmssg'>Change Password</span>
		</div>
		<p id='pw_mssg'>Enter current and new password:</p>
    	<p><label class='lbl_pw' for="currpw">Current Password:</label>
    	<input class='inp_pw' type="password" id="currpw" name="field1" autofocus></p>
    	<p><label class='lbl_pw'for="newpw">New Password:</label>
    	<input class='inp_pw' type="password" id="newpw" name="field2"><br></p>
    	<p><label class='lbl_pw'for="verifypw" >Verify Password:</label>
    	<input class='inp_pw' type="password" id="verifypw" name="field3"></p>
    	<div id='buttonbar'>
      	  <button id="cancel" onclick="onCancel()">Cancel</button>
      	  <button id="submit" onclick="onChangePW()">Change Password</button>
    	</div> 
	</div>
  </div>
  <!-- Timeout Dialog -->
  <div id="timeoutdlg" class="modalDialog">
	<div id='inner'>
		<div id='dialogtopbar'>
		  <img src="onclogo" height="45" width="65"/>
		  <span id='dialogmssg'>Session Timeout</span>
		</div>
		<p id='to_mssg'>Your session expired due to inactivity</p>
    	<div id='buttonbar'>
      	  <button id="submit" onclick="onSessionTimeout()">Logout</button>
    	</div> 
	</div>
  </div>
</body>
</html>